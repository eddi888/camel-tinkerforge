{
    "category": "Bricklet",
    "description": {
        "de": "Misst Temperatur mit Thermoelementen",
        "en": "Measures temperature with thermocouples"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "Temperature",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Temperature",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Temperatur des Thermoelements zur\u00fcck. Der Wert wird in \u00b0C/100 \nangegeben, z.B. bedeutet ein Wert von 4223 eine gemessene Temperatur von \n42,23 \u00b0C.\n\nWenn die Temperatur periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Temperature` zu nutzen und die Periode mit \n:func:`SetTemperatureCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the temperature of the thermocouple. The value is given in \u00b0C/100,\ne.g. a value of 4223 means that a temperature of 42.23 \u00b0C is measured.\n\nIf you want to get the temperature periodically, it is recommended \nto use the callback :func:`Temperature` and set the period with \n:func:`SetTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Temperature` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Temperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Temperature` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Temperature` is only triggered if the temperature has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetTemperatureCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`TemperatureReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`TemperatureReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the temperature is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the temperature is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the temperature is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the temperature is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetTemperatureCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetTemperatureCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callback\n\n* :func:`TemperatureReached`\n \nausgel\u00f6st wird, wenn der Schwellwert \n\n* :func:`SetTemperatureCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`TemperatureReached`\n\nis triggered, if the threshold\n\n* :func:`SetTemperatureCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Temperature",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetTemperatureCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Temperatur des Thermoelements.\n\n:func:`Temperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetThermocoupleCallbackPeriod`. The :word:`parameter` is the temperature\nof the thermocouple.\n\n:func:`Temperature` is only triggered if the temperature has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Temperature Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetTemperatureCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Temperatur des Thermoelements.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetTemperatureCallbackThreshold` is reached.\nThe :word:`parameter` is the temperature of the thermocouple.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Averaging",
                    "uint8",
                    1,
                    "in",
                    [
                        "Averaging",
                        [
                            [
                                "1",
                                1
                            ],
                            [
                                "2",
                                2
                            ],
                            [
                                "4",
                                4
                            ],
                            [
                                "8",
                                8
                            ],
                            [
                                "16",
                                16
                            ]
                        ]
                    ]
                ],
                [
                    "Thermocouple Type",
                    "uint8",
                    1,
                    "in",
                    [
                        "Type",
                        [
                            [
                                "B",
                                0
                            ],
                            [
                                "E",
                                1
                            ],
                            [
                                "J",
                                2
                            ],
                            [
                                "K",
                                3
                            ],
                            [
                                "N",
                                4
                            ],
                            [
                                "R",
                                5
                            ],
                            [
                                "S",
                                6
                            ],
                            [
                                "T",
                                7
                            ],
                            [
                                "G8",
                                8
                            ],
                            [
                                "G32",
                                9
                            ]
                        ]
                    ]
                ],
                [
                    "Filter",
                    "uint8",
                    1,
                    "in",
                    [
                        "Filter Option",
                        [
                            [
                                "50Hz",
                                0
                            ],
                            [
                                "60Hz",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": "Set Configuration",
            "doc": [
                "af",
                {
                    "de": "\nKonfiguriert werden k\u00f6nnen Averaging-Gr\u00f6\u00dfe, Thermoelement-Typ und\nFrequenz-Filterung.\n\nM\u00f6gliche Averaging-Gr\u00f6\u00dfen sind 1, 2, 4, 8 und 16 Samples.\n\nAls Thermoelement-Typ stehen B, E, J, K, N, R, S und T zur Verf\u00fcgung.\nFalls ein anderes Thermoelement benutzt werden soll, k\u00f6nnen G8 und G32\ngenutzt werden. Mit diesen Typen wird der Wert nicht in \u00b0C/100 zur\u00fcckgegeben\nsondern er wird durch folgende Formeln bestimmt:\n\n* G8: ``Wert = 8 * 1.6 * 2^17 * Vin``\n* G32: ``Wert = 32 * 1.6 * 2^17 * Vin``\n\ndabei ist Vin die Eingangsspannung des Thermoelements.\n\nDer Frequenz-Filter kann auf 50Hz und 60Hz konfiguriert werden. Er sollte\nabh\u00e4ngig von der lokalen Netzfrequenz gew\u00e4hlt werden.\n\nDie Konvertierungszeit ist abh\u00e4ngig von der Averaging-Gr\u00f6\u00dfe und der\nFrequenz-Filter-Konfiguration. Sie kann wie folgt bestimmt werden:\n\n* 60Hz: ``Zeit = 82 + (Samples - 1) * 16.67``\n* 50Hz: ``Zeit = 98 + (Samples - 1) * 20``\n\nDie Standardkonfiguration ist 16 Samples, Typ K und 50Hz.\n",
                    "en": "\nYou can configure averaging size, thermocouple type and frequency\nfiltering.\n\nAvailable averaging sizes are 1, 2, 4, 8 and 16 samples.\n\nAs thermocouple type you can use B, E, J, K, N, R, S and T. If you have a\ndifferent thermocouple or a custom thermocouple you can also use\nG8 and G32. With these types the returned value will not be in \u00b0C/100,\nit will be calculated by the following formulas:\n\n* G8: ``value = 8 * 1.6 * 2^17 * Vin``\n* G32: ``value = 32 * 1.6 * 2^17 * Vin``\n\nwhere Vin is the thermocouple input voltage.\n\nThe frequency filter can be either configured to 50Hz or to 60Hz. You should\nconfigure it according to your utility frequency.\n\nThe conversion time depends on the averaging and filter configuration, it can\nbe calculated as follows:\n\n* 60Hz: ``time = 82 + (samples - 1) * 16.67``\n* 50Hz: ``time = 98 + (samples - 1) * 20``\n\nThe default configuration is 16 samples, K type and 50Hz.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Averaging",
                    "uint8",
                    1,
                    "out",
                    [
                        "Averaging",
                        [
                            [
                                "1",
                                1
                            ],
                            [
                                "2",
                                2
                            ],
                            [
                                "4",
                                4
                            ],
                            [
                                "8",
                                8
                            ],
                            [
                                "16",
                                16
                            ]
                        ]
                    ]
                ],
                [
                    "Thermocouple Type",
                    "uint8",
                    1,
                    "out",
                    [
                        "Type",
                        [
                            [
                                "B",
                                0
                            ],
                            [
                                "E",
                                1
                            ],
                            [
                                "J",
                                2
                            ],
                            [
                                "K",
                                3
                            ],
                            [
                                "N",
                                4
                            ],
                            [
                                "R",
                                5
                            ],
                            [
                                "S",
                                6
                            ],
                            [
                                "T",
                                7
                            ],
                            [
                                "G8",
                                8
                            ],
                            [
                                "G32",
                                9
                            ]
                        ]
                    ]
                ],
                [
                    "Filter",
                    "uint8",
                    1,
                    "out",
                    [
                        "Filter Option",
                        [
                            [
                                "50Hz",
                                0
                            ],
                            [
                                "60Hz",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": "Get Configuration",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`SetConfiguration` gesetzt.\n",
                    "en": "\nReturns the configuration as set by :func:`SetConfiguration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Over Under",
                    "bool",
                    1,
                    "out"
                ],
                [
                    "Open Circuit",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Error State",
            "doc": [
                "af",
                {
                    "de": "\nGibt den aktuellen Error-Status zur\u00fcck. Es gibt zwei m\u00f6gliche Status:\n\n* Over/Under Voltage und\n* Open Circuit.\n\nOver/Under Voltage bei Spannungen unter 0V oder \u00fcber 3.3V ausgel\u00f6st. In diesem\nFall ist mit hoher Wahrscheinlichkeit das Thermoelement defekt. Ein\nOpen Circuit-Error deutet darauf hin, das kein Thermoelement angeschlossen\nist.\n\nDer func:`ErrorState` Callback wird automatisch jedes mal ausgel\u00f6st wenn sich\nder Error-Status \u00e4ndert.\n",
                    "en": "\nReturns the current error state. There are two possible errors:\n\n* Over/Under Voltage and\n* Open Circuit.\n\nOver/Under Voltage happens for voltages below 0V or above 3.3V. In this case\nit is very likely that your thermocouple is defective. An Open Circuit error\nindicates that there is no thermocouple connected.\n\nYou can use the func:`ErrorState` callback to automatically get triggered\nwhen the error state changes.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Over Under",
                    "bool",
                    1,
                    "out"
                ],
                [
                    "Open Circuit",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Error State",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Error-Status sich ver\u00e4ndert\n(siehe func:`GetErrorStatus`).\n",
                    "en": "\nThis Callback is triggered every time the error state changes \n(see func:`GetErrorStatus`).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 266,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "getter",
                    [
                        "Get Temperature",
                        "temperature"
                    ],
                    [
                        [
                            [
                                "Temperature",
                                "Temperature"
                            ],
                            "int32",
                            100.0,
                            "\u00b0C/100",
                            "\u00b0C",
                            null
                        ]
                    ],
                    []
                ]
            ],
            "name": "Simple"
        },
        {
            "functions": [
                [
                    "callback",
                    [
                        "Temperature",
                        "temperature"
                    ],
                    [
                        [
                            [
                                "Temperature",
                                "Temperature"
                            ],
                            "int32",
                            100.0,
                            "\u00b0C/100",
                            "\u00b0C",
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_period",
                    [
                        "Temperature",
                        "temperature"
                    ],
                    [],
                    1000
                ]
            ],
            "name": "Callback"
        },
        {
            "functions": [
                [
                    "debounce_period",
                    10000
                ],
                [
                    "callback",
                    [
                        "Temperature Reached",
                        "temperature reached"
                    ],
                    [
                        [
                            [
                                "Temperature",
                                "Temperature"
                            ],
                            "int32",
                            100.0,
                            "\u00b0C/100",
                            "\u00b0C",
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_threshold",
                    [
                        "Temperature",
                        "temperature"
                    ],
                    [],
                    ">",
                    [
                        [
                            30,
                            0
                        ]
                    ]
                ]
            ],
            "name": "Threshold"
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Thermocouple",
        "Thermocouple",
        "Thermocouple Bricklet"
    ]
}