{
    "category": "Bricklet",
    "description": {
        "de": "Misst Farbe (RGB Wert), Beleuchtungsst\u00e4rke und Farbtemperatur",
        "en": "Measures color (RGB value), illuminance and color temperature"
    },
    "author": "Ishraq Ibne Ashraf <ishraq@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "R",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "G",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "B",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "C",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Color",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessene Farbe des Sensors zur\u00fcck. Der Wertebereich ist von\n0 bis 65535.\n\nDie rot (r), gr\u00fcn (g), blau (b) und clear (c) werden mit vier\nunterschiedlichen Fotodioden gemessen. Diese sind Empfindlich\nin unterschiedlichen Wellenl\u00e4ngen:\n\n.. image:: /Images/Bricklets/bricklet_color_wavelength_chart_600.jpg\n   :scale: 100 %\n   :alt: Chart Responsivity / Wavelength\n   :align: center\n   :target: ../../_images/Bricklets/bricklet_color_wavelength_chart_600.jpg\n\nWenn die Farbe periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Color` zu nutzen und die Periode mit \n:func:`SetColorCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the measured color of the sensor. The values\nhave a range of 0 to 65535.\n\nThe red (r), green (g), blue (b) and clear (c) colors are measured\nwith four different photodiodes that are responsive at different\nwavelengths:\n\n.. image:: /Images/Bricklets/bricklet_color_wavelength_chart_600.jpg\n   :scale: 100 %\n   :alt: Chart Responsivity / Wavelength\n   :align: center\n   :target: ../../_images/Bricklets/bricklet_color_wavelength_chart_600.jpg\n\nIf you want to get the color periodically, it is recommended \nto use the callback :func:`Color` and set the period with \n:func:`SetColorCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Color Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Color` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Color` wird nur ausgel\u00f6st wenn sich die Color seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Color` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Color` is only triggered if the color has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Color Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetColorCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetColorCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min R",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Max R",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Min G",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Max G",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Min B",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Max B",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Min C",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Max C",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": "Set Color Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`ColorReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0, 0, 0, 0, 0, 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`ColorReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the temperature is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the temperature is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the temperature is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the temperature is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0, 0, 0, 0, 0, 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min R",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Max R",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Min G",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Max G",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Min B",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Max B",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Min C",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Max C",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Color Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetColorCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetColorCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callback\n\n* :func:`ColorReached`\n \nausgel\u00f6st wird, wenn der Schwellwert \n\n* :func:`SetColorCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`ColorReached`\n\nis triggered, if the threshold\n\n* :func:`SetColorCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "R",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "G",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "B",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "C",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Color",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetColorCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Farbe des Sensors als RGBC.\n\n:func:`Color` wird nur ausgel\u00f6st wenn sich die Farbe seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetColorCallbackPeriod`. The :word:`parameter` is the color\nof the sensor as RGBC.\n\n:func:`Color` is only triggered if the color has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "R",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "G",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "B",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "C",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Color Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetColorCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Farbe des Sensors als RGBC.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetColorCallbackThreshold` is reached.\nThe :word:`parameter` is the color\nof the sensor as RGBC.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "callback"
        },
        {
            "elements": [],
            "name": "Light On",
            "doc": [
                "bf",
                {
                    "de": "\nAktiviert die LED.\n",
                    "en": "\nTurns the LED on.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [],
            "name": "Light Off",
            "doc": [
                "bf",
                {
                    "de": "\nDeaktiviert die LED.\n",
                    "en": "\nTurns the LED off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Light",
                    "uint8",
                    1,
                    "out",
                    [
                        "Light",
                        [
                            [
                                "On",
                                0
                            ],
                            [
                                "Off",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": "Is Light On",
            "doc": [
                "bf",
                {
                    "de": "\nGibt den Zustand der LED zur\u00fcck. M\u00f6gliche Werte sind:\n\n* 0: On\n* 1: Off\n",
                    "en": "\nReturns the state of the LED. Possible values are:\n\n* 0: On\n* 1: Off\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Gain",
                    "uint8",
                    1,
                    "in",
                    [
                        "Gain",
                        [
                            [
                                "1x",
                                0
                            ],
                            [
                                "4x",
                                1
                            ],
                            [
                                "16x",
                                2
                            ],
                            [
                                "60x",
                                3
                            ]
                        ]
                    ]
                ],
                [
                    "Integration Time",
                    "uint8",
                    1,
                    "in",
                    [
                        "Integration Time",
                        [
                            [
                                "2ms",
                                0
                            ],
                            [
                                "24ms",
                                1
                            ],
                            [
                                "101ms",
                                2
                            ],
                            [
                                "154ms",
                                3
                            ],
                            [
                                "700ms",
                                4
                            ]
                        ]
                    ]
                ]
            ],
            "name": "Set Config",
            "doc": [
                "bf",
                {
                    "de": "\nSetzt die Konfiguration des Sensors. Verst\u00e4rkung und Integrationszeit k\u00f6nnen\neingestellt werden.\n\nF\u00fcr die Konfiguration der Verst\u00e4rkung:\n\n* 0: 1x Gain\n* 1: 4x Gain\n* 2: 16x Gain\n* 3: 60x Gain\n\nF\u00fcr die Konfiguration der Integrationszeit:\n\n* 0: 2,4ms\n* 1: 24ms\n* 2: 101ms\n* 3: 154ms\n* 4: 700ms\n\nEine Erh\u00f6hung der Verst\u00e4rkung erm\u00f6glicht es dem Sensor Farben aus gr\u00f6\u00dferen\nEntfernungen zu erkennen.\n\nDie Integrationszeit ist ein Trade-off zwischen Konvertierungszeit und\nGenauigkeit. Mit einer h\u00f6heren Integrationszeit werden die Werte genauer,\nes dauert allerdings l\u00e4nger bis ein Resultat bereitsteht.\n\nDie Standardwerte sind 60x Verst\u00e4rkung und 154ms Integrationszeit.\n",
                    "en": "\nSets the configuration of the sensor. Gain and integration time\ncan be configured in this way.\n\nFor configuring the gain:\n\n* 0: 1x Gain\n* 1: 4x Gain\n* 2: 16x Gain\n* 3: 60x Gain\n\nFor configuring the integration time:\n\n* 0: 2.4ms\n* 1: 24ms\n* 2: 101ms\n* 3: 154ms\n* 4: 700ms\n\nIncreasing the gain enables the sensor to detect a\ncolor from a higher distance.\n\nThe integration time provides a trade-off between conversion time\nand accuracy. With a longer integration time the values read will\nbe more accurate but it will take longer time to get the conversion\nresults.\n\nThe default values are 60x gain and 154ms integration time.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Gain",
                    "uint8",
                    1,
                    "out",
                    [
                        "Gain",
                        [
                            [
                                "1x",
                                0
                            ],
                            [
                                "4x",
                                1
                            ],
                            [
                                "16x",
                                2
                            ],
                            [
                                "60x",
                                3
                            ]
                        ]
                    ]
                ],
                [
                    "Integration Time",
                    "uint8",
                    1,
                    "out",
                    [
                        "Integration Time",
                        [
                            [
                                "2ms",
                                0
                            ],
                            [
                                "24ms",
                                1
                            ],
                            [
                                "101ms",
                                2
                            ],
                            [
                                "154ms",
                                3
                            ],
                            [
                                "700ms",
                                4
                            ]
                        ]
                    ]
                ]
            ],
            "name": "Get Config",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Einstellungen zur\u00fcck, wie von :func:`SetConfig`\ngesetzt.\n",
                    "en": "\nReturns the configuration as set by :func:`SetConfig`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Illuminance",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Illuminance",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Beleuchtungsst\u00e4rke beeinflusst durch die Verst\u00e4rkung und die\nIntegrationszeit zur\u00fcck. Verst\u00e4rkung und Integrationszeit k\u00f6nnen mit\n:func:`SetConfig` eingestellt werden. Um die Beleuchtungsst\u00e4rke in Lux zu\nermitteln muss folgende Formel angewendet werden::\n\n lux = illuminance * 700 / gain / integration_time\n\nF\u00fcr eine korrekte Messung der Beleuchtungsst\u00e4rke muss sichergestellt\nsein, dass die Farbwerte (R, G oder B) nicht saturiert sind. Ein\nFarbwert ist saturiert wenn der Wert 65535 betr\u00e4gt. In diesem Fall\nkann die Verst\u00e4rkung per :func:`SetConfig` reduziert werden.\n",
                    "en": "\nReturns the illuminance affected by the gain and integration time as\nset by :func:`SetConfig`. To get the illuminance in Lux apply this formula::\n\n lux = illuminance * 700 / gain / integration_time\n\nTo get a correct illuminance measurement make sure that the color\nvalues themself are not saturated. The color value (R, G or B)\nis saturated if it is equal to the maximum value of 65535.\nIn that case you have to reduce the gain, see :func:`SetConfig`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Color Temperature",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Color Temperature",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Farbtemperatur in Kelvin zur\u00fcck.\n\nF\u00fcr eine korrekte Messung der Farbtemperatur muss sichergestellt\nsein das die Farbwerte (R, G oder B) nicht saturiert sind. Ein\nFarbwert ist saturiert wenn der Wert 65535 betr\u00e4gt. In diesem Fall\nkann die Verst\u00e4rkung per :func:`SetConfig` reduziert werden.\n",
                    "en": "\nReturns the color temperature in Kelvin.\n\nTo get a correct color temperature measurement make sure that the color\nvalues themself are not saturated. The color value (R, G or B)\nis saturated if it is equal to the maximum value of 65535.\nIn that case you have to reduce the gain, see :func:`SetConfig`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Illuminance Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Illuminance` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Illuminance` wird nur ausgel\u00f6st wenn sich die Beleuchtungsst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Illuminance` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Illuminance` is only triggered if the illuminance has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Illuminance Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetIlluminanceCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetIlluminanceCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Color Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`ColorTemperature` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`ColorTemperature` wird nur ausgel\u00f6st wenn sich die Farbtemperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`ColorTemperature` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`ColorTemperature` is only triggered if the color temperature has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 19,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Color Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetColorTemperatureCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetColorTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 20,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Illuminance",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Illuminance",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetIlluminanceCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Beleuchtungsst\u00e4rke des Sensors.\nSiehe :func:`GetIlluminance` f\u00fcr eine Erkl\u00e4rung wie dieser zu interpretieren ist.\n\n:func:`Illuminance` wird nur ausgel\u00f6st wenn sich die Beleuchtungsst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetIlluminanceCallbackPeriod`. The :word:`parameter` is the illuminance.\nSee :func:`GetIlluminance` for how to interpret this value.\n\n:func:`Illuminance` is only triggered if the illuminance has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 21,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Color Temperature",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Color Temperature",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetColorTemperatureCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Farbtemperatur des Sensors in Kelvin.\n\n:func:`ColorTemperature` wird nur ausgel\u00f6st wenn sich die Farbtemperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetColorTemperatureCallbackPeriod`. The :word:`parameter` is the \ncolor temperature in Kelvin.\n\n:func:`ColorTemperature` is only triggered if the color temperature has \nchanged since the last triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 22,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 243,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "getter",
                    [
                        "Get Color",
                        "color"
                    ],
                    [
                        [
                            [
                                "R",
                                "Color[R]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "G",
                                "Color[G]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "B",
                                "Color[B]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "C",
                                "Color[C]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ]
                    ],
                    []
                ]
            ],
            "name": "Simple"
        },
        {
            "functions": [
                [
                    "callback",
                    [
                        "Color",
                        "color"
                    ],
                    [
                        [
                            [
                                "R",
                                "Color[R]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "G",
                                "Color[G]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "B",
                                "Color[B]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "C",
                                "Color[C]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_period",
                    [
                        "Color",
                        "color"
                    ],
                    [],
                    1000
                ]
            ],
            "name": "Callback"
        },
        {
            "functions": [
                [
                    "debounce_period",
                    10000
                ],
                [
                    "callback",
                    [
                        "Color Reached",
                        "color reached"
                    ],
                    [
                        [
                            [
                                "R",
                                "Color[R]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "G",
                                "Color[G]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "B",
                                "Color[B]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ],
                        [
                            [
                                "C",
                                "Color[C]"
                            ],
                            "uint16",
                            null,
                            null,
                            null,
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_threshold",
                    [
                        "Color",
                        "color"
                    ],
                    [],
                    ">",
                    [
                        [
                            100,
                            0
                        ],
                        [
                            200,
                            0
                        ],
                        [
                            300,
                            0
                        ],
                        [
                            400,
                            0
                        ]
                    ]
                ]
            ],
            "name": "Threshold"
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Color",
        "Color",
        "Color Bricklet"
    ]
}