{
    "category": "Brick",
    "description": {
        "de": "Voll ausgestattetes AHRS mit 9 Freiheitsgraden",
        "en": "Full fledged AHRS with 9 degrees of freedom"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAcceleration",
                "get_acceleration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die kalibrierten Beschleunigungen des Beschleunigungsmessers f\u00fcr die \nX, Y und Z-Achse in mG zur\u00fcck (G/1000, 1G = 9.80605m/s\u00b2).\n\nWenn die kalibrierten Beschleunigungen periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Acceleration` zu nutzen und die Periode mit :func:`SetAccelerationPeriod`\nvorzugeben.\n",
                    "en": " \nReturns the calibrated acceleration from the accelerometer for the \nx, y and z axis in mG (G/1000, 1G = 9.80605m/s\u00b2).\n\nIf you want to get the acceleration periodically, it is recommended \nto use the callback :func:`Acceleration` and set the period with \n:func:`SetAccelerationPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMagneticField",
                "get_magnetic_field"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das kalibrierte magnetische Feld des Magnetometers mit den X-, Y- und\nZ-Komponenten in mG zur\u00fcck (Milligauss oder Nanotesla).\n\nWenn das magnetische Feld periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`MagneticField` zu nutzen und die Periode mit :func:`SetMagneticFieldPeriod`\nvorzugeben.\n",
                    "en": "\nReturns the calibrated magnetic field from the magnetometer for the \nx, y and z axis in mG (Milligauss or Nanotesla).\n\nIf you want to get the magnetic field periodically, it is recommended \nto use the callback :func:`MagneticField` and set the period with \n:func:`SetMagneticFieldPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAngularVelocity",
                "get_angular_velocity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die kalibrierten Winkelgeschwindigkeiten des Gyroskops f\u00fcr die X-, Y- und\nZ-Achse in \u00b0/14,375s zur\u00fcck. (Um den Wert in \u00b0/s zu erhalten ist es notwendig\ndurch 14,375 zu teilen)\n\nWenn die Winkelgeschwindigkeiten periodisch abgefragt werden sollen, wird empfohlen\nden Callback :func:`AngularVelocity` zu nutzen und die Periode mit\n:func:`SetAngularVelocityPeriod` vorzugeben.\n",
                    "en": "\nReturns the calibrated angular velocity from the gyroscope for the \nx, y and z axis in \u00b0/14.375s (you have to divide by 14.375 to\nget the value in \u00b0/s).\n\nIf you want to get the angular velocity periodically, it is recommended \nto use the callback :func:`AngularVelocity` and set the period with \n:func:`SetAngularVelocityPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "acc_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "acc_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "acc_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAllData",
                "get_all_data"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Daten von :func:`GetAcceleration`, :func:`GetMagneticField` \nund :func:`GetAngularVelocity` sowie die Temperatur des IMU Brick zur\u00fcck.\n\nDie Temperatur wird in \u00b0C/100 ausgegeben.\n\nWenn die Daten periodisch abgefragt werden sollen, wird empfohlen den\nCallback :func:`AllData` zu nutzen und die Periode mit :func:`SetAllDataPeriod`\nvorzugeben.\n",
                    "en": "\nReturns the data from :func:`GetAcceleration`, :func:`GetMagneticField` \nand :func:`GetAngularVelocity` as well as the temperature of the IMU Brick.\n\nThe temperature is given in \u00b0C/100.\n\nIf you want to get the data periodically, it is recommended \nto use the callback :func:`AllData` and set the period with \n:func:`SetAllDataPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "roll",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "pitch",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "yaw",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetOrientation",
                "get_orientation"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die aktuelle Orientierung (Roll-, Nick-, Gierwinkel) des IMU Brick in Eulerwinkeln\n(in 1/100 \u00b0) zur\u00fcck. Zu beachten ist, dass Eulerwinkel immer eine \n`kardanische Blockade <https://de.wikipedia.org/wiki/Gimbal_Lock>`__ erfahren.\n\nWir empfehlen die Verwendung von Quaternionen stattdessen.\n\nDie Reihenfolge in denen die Orientierungswerte angewandt werden sollten,\nist Roll-, Nick-, Gierwinkel.\n\nWenn die Orientierung periodisch abgefragt werden sollen, wird empfohlen den\nCallback :func:`Orientation` zu nutzen und die Periode mit :func:`SetOrientationPeriod`\nvorzugeben.\n",
                    "en": "\nReturns the current orientation (roll, pitch, yaw) of the IMU Brick as Euler\nangles in one-hundredth degree. Note that Euler angles always experience a\n`gimbal lock <https://en.wikipedia.org/wiki/Gimbal_lock>`__.\n\nWe recommend that you use quaternions instead.\n\nThe order to sequence in which the orientation values should be applied is \nroll, yaw, pitch. \n\nIf you want to get the orientation periodically, it is recommended \nto use the callback :func:`Orientation` and set the period with \n:func:`SetOrientationPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "x",
                    "float",
                    1,
                    "out"
                ],
                [
                    "y",
                    "float",
                    1,
                    "out"
                ],
                [
                    "z",
                    "float",
                    1,
                    "out"
                ],
                [
                    "w",
                    "float",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetQuaternion",
                "get_quaternion"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die aktuelle Orientierung (x, y, z, w) des IMU Brick als\n`Quaterinonen <https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation>`__ zur\u00fcck.\n\nDie Umrechnung von Quaternionen in Eulerwinkel ist mit folgender Formel m\u00f6glich::\n\n xAngle = atan2(2*y*w - 2*x*z, 1 - 2*y*y - 2*z*z)\n yAngle = atan2(2*x*w - 2*y*z, 1 - 2*x*x - 2*z*z)\n zAngle =  asin(2*x*y + 2*z*w)\n\nEs ist auch m\u00f6glich unabh\u00e4ngige Winkel zu berechen. Yaw, Pitch und Roll\nin einem rechtsh\u00e4ndigen Fahrzeugkoordinatensystem nach DIN70000 k\u00f6nnen\nwie folgt berechnet werden::\n\n yaw   =  atan2(2*x*y + 2*w*z, w*w + x*x - y*y - z*z)\n pitch = -asin(2*w*y - 2*x*z)\n roll  = -atan2(2*y*z + 2*w*x, -w*w + x*x + y*y - z*z))\n \nDiese Umrechnung ist irreversibel aufgrund der \n`kardanischen Blockade <https://de.wikipedia.org/wiki/Gimbal_lock>`__.\n\nDie Umrechnung von Quaternionen in eine OpenGL Transformationsmatrix ist\nmit folgender Formel m\u00f6glich::\n\n matrix = [[1 - 2*(y*y + z*z),     2*(x*y - w*z),     2*(x*z + w*y), 0],\n           [    2*(x*y + w*z), 1 - 2*(x*x + z*z),     2*(y*z - w*x), 0],\n           [    2*(x*z - w*y),     2*(y*z + w*x), 1 - 2*(x*x + y*y), 0],\n           [                0,                 0,                 0, 1]]\n\nWenn die Quaternionen periodisch abgefragt werden sollen, wird empfohlen den\nCallback :func:`Quaternion` zu nutzen und die Periode mit :func:`SetQuaternionPeriod`\nvorzugeben.\n",
                    "en": "\nReturns the current orientation (x, y, z, w) of the IMU as \n`quaternions <https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation>`__.\n\nYou can go from quaternions to Euler angles with the following formula::\n\n xAngle = atan2(2*y*w - 2*x*z, 1 - 2*y*y - 2*z*z)\n yAngle = atan2(2*x*w - 2*y*z, 1 - 2*x*x - 2*z*z)\n zAngle =  asin(2*x*y + 2*z*w)\n\nThis process is not reversible, because of the \n`gimbal lock <https://en.wikipedia.org/wiki/Gimbal_lock>`__.\n\nIt is also possible to calculate independent angles. You can calculate \nyaw, pitch and roll in a right-handed vehicle coordinate system according to DIN70000\nwith::\n\n yaw   =  atan2(2*x*y + 2*w*z, w*w + x*x - y*y - z*z)\n pitch = -asin(2*w*y - 2*x*z)\n roll  = -atan2(2*y*z + 2*w*x, -w*w + x*x + y*y - z*z))\n\nConverting the quaternions to an OpenGL transformation matrix is\npossible with the following formula::\n\n matrix = [[1 - 2*(y*y + z*z),     2*(x*y - w*z),     2*(x*z + w*y), 0],\n           [    2*(x*y + w*z), 1 - 2*(x*x + z*z),     2*(y*z - w*x), 0],\n           [    2*(x*z - w*y),     2*(y*z + w*x), 1 - 2*(x*x + y*y), 0],\n           [                0,                 0,                 0, 1]]\n\nIf you want to get the quaternions periodically, it is recommended \nto use the callback :func:`Quaternion` and set the period with \n:func:`SetQuaternionPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIMUTemperature",
                "get_imu_temperature"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Temperatur (in \u00b0C/100) des IMU Brick zur\u00fcck.\n",
                    "en": "\nReturns the temperature of the IMU Brick. The temperature is given in \n\u00b0C/100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "LedsOn",
                "leds_on"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nAktiviert die Orientierungs- und Richtungs-LEDs des IMU Brick.\n",
                    "en": "\nTurns the orientation and direction LEDs of the IMU Brick on.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "LedsOff",
                "leds_off"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nDeaktiviert die Orientierungs- und Richtungs-LEDs des IMU Brick.\n",
                    "en": "\nTurns the orientation and direction LEDs of the IMU Brick off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "leds",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "AreLedsOn",
                "are_leds_on"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt zur\u00fcck ob die Orientierungs- und Richtungs-LEDs des IMU Brick aktiv sind. \n",
                    "en": "\nReturns *true* if the orientation and direction LEDs of the IMU Brick\nare on, *false* otherwise.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "range",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetAccelerationRange",
                "set_acceleration_range"
            ],
            "doc": [
                "af",
                {
                    "de": "\nBisher nicht implementiert.\n",
                    "en": "\nNot implemented yet.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "range",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAccelerationRange",
                "get_acceleration_range"
            ],
            "doc": [
                "af",
                {
                    "de": "\nBisher nicht implementiert.\n",
                    "en": "\nNot implemented yet.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "range",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetMagnetometerRange",
                "set_magnetometer_range"
            ],
            "doc": [
                "af",
                {
                    "de": "\nBisher nicht implementiert.\n",
                    "en": "\nNot implemented yet.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [
                [
                    "range",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMagnetometerRange",
                "get_magnetometer_range"
            ],
            "doc": [
                "af",
                {
                    "de": "\nBisher nicht implementiert.\n",
                    "en": "\nNot implemented yet.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "speed",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetConvergenceSpeed",
                "set_convergence_speed"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nSetzt die Konvergenzgeschwindigkeit des IMU Brick in \u00b0/s. Die \nKonvergenzgeschwindigkeit bestimmt wie die unterschiedlichen Sensormessungen\nvereinigt werden.\n\nWenn die Orientierung des IMU Brick eine Abweichung von 10\u00b0 hat und die\nKonvergenzgeschwindigkeit auf 20\u00b0/s konfiguriert ist, dann dauert es\n0,5s bis die Orientierung korrigiert ist. Bei einer zu hohen Konvergenzgeschwindigkeit\nwird nach Erreichen der korrekten Orientierung, diese um die Fluktuationen des\nBeschleunigungsmessers und des Magnetometers schwanken.\n\nWenn die Konvergenzgeschwindigkeit auf 0 gesetzt wird, erfolgt die Berechnung der\nOrientierung praktisch nur anhand der Gyroskopdaten. Dies ergibt sehr gleichm\u00e4\u00dfige\nBewegungen aber Fehler des Gyroskops werden nicht korrigiert. Wenn die\nKonvergenzgeschwindigkeit \u00fcber 500 gesetzt wird, erfolgt die Berechnung der\nOrientierung praktisch nur anhand der Beschleunigungsmesser- und Magnetometerdaten.\nIn diesem Fall sind die Bewegungen abrupt und die Werte werden schwanken. Es\ntreten aber keine akkumulativen Fehler auf.\n\nIn Anwendungen mit hohen Winkelgeschwindigkeiten wird eine hohe Konvergenzgeschwindigkeit\nempfohlen, so dass Fehler des Gyroskops schnell korrigiert werden k\u00f6nnen. In\nAnwendungen mit langsamen Bewegungen wird entsprechend eine geringe\nKonvergenzgeschwindigkeit empfohlen. Es ist m\u00f6glich die Konvergenzgeschwindigkeit \nspontan zu \u00e4ndern. Dadurch ist es m\u00f6glich (und empfohlen) direkt vor einer abrupten \nBewegung die Konvergenzgeschwindigkeit zu erh\u00f6hen und im Anschluss wieder zu verringern.\n\nUm ein Gef\u00fchl f\u00fcr einen guten Wert, f\u00fcr die Konvergenzgeschwindigkeit,\nin deiner Anwendung zu bekommen ist es ratsam im Brick Viewer verschiedenste Werte\nauszuprobieren.\n",
                    "en": "\nSets the convergence speed of the IMU Brick in \u00b0/s. The convergence speed \ndetermines how the different sensor measurements are fused.\n\nIf the orientation of the IMU Brick is off by 10\u00b0 and the convergence speed is \nset to 20\u00b0/s, it will take 0.5s until the orientation is corrected. However,\nif the correct orientation is reached and the convergence speed is too high,\nthe orientation will fluctuate with the fluctuations of the accelerometer and\nthe magnetometer.\n\nIf you set the convergence speed to 0, practically only the gyroscope is used\nto calculate the orientation. This gives very smooth movements, but errors of the\ngyroscope will not be corrected. If you set the convergence speed to something\nabove 500, practically only the magnetometer and the accelerometer are used to\ncalculate the orientation. In this case the movements are abrupt and the values\nwill fluctuate, but there won't be any errors that accumulate over time.\n\nIn an application with high angular velocities, we recommend a high convergence\nspeed, so the errors of the gyroscope can be corrected fast. In applications with\nonly slow movements we recommend a low convergence speed. You can change the\nconvergence speed on the fly. So it is possible (and recommended) to increase \nthe convergence speed before an abrupt movement and decrease it afterwards \nagain.\n\nYou might want to play around with the convergence speed in the Brick Viewer to\nget a feeling for a good value for your application.\n\nThe default value is 30.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "function"
        },
        {
            "elements": [
                [
                    "speed",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetConvergenceSpeed",
                "get_convergence_speed"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Konvergenzgeschwindigkeit zur\u00fcck, wie von :func:`SetConvergenceSpeed` gesetzt.\n",
                    "en": "\nReturns the convergence speed as set by :func:`SetConvergenceSpeed`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "function"
        },
        {
            "elements": [
                [
                    "typ",
                    "uint8",
                    1,
                    "in",
                    [
                        "CalibrationType",
                        "calibration_type",
                        [
                            [
                                "AccelerometerGain",
                                "accelerometer_gain",
                                0
                            ],
                            [
                                "AccelerometerBias",
                                "accelerometer_bias",
                                1
                            ],
                            [
                                "MagnetometerGain",
                                "magnetometer_gain",
                                2
                            ],
                            [
                                "MagnetometerBias",
                                "magnetometer_bias",
                                3
                            ],
                            [
                                "GyroscopeGain",
                                "gyroscope_gain",
                                4
                            ],
                            [
                                "GyroscopeBias",
                                "gyroscope_bias",
                                5
                            ]
                        ]
                    ]
                ],
                [
                    "data",
                    "int16",
                    10,
                    "in"
                ]
            ],
            "name": [
                "SetCalibration",
                "set_calibration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nEs sind folgende verschiedene Kalibrierungen m\u00f6glich:\n\n.. csv-table::\n :header: \"Typ\", \"Beschreibung\", \"Werte\"\n :widths: 10, 30, 110\n \n \"0\",    \"Beschleunigungsmesser Verst\u00e4rkung\", \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"1\",    \"Beschleunigungsmesser Versatz\",     \"``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``\"\n \"2\",    \"Magnetometer Verst\u00e4rkung\",          \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"3\",    \"Magnetometer Versatz\",              \"``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``\"\n \"4\",    \"Gyroskop Verst\u00e4rkung\",              \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"5\",    \"Gyroskop Versatz\",                  \"``[bias xl, bias yl, bias zl, temp l, bias xh, bias yh, bias zh, temp h, 0, 0]``\"\n\nDie Kalibrierung mittels Verst\u00e4rkung und Versatz wird \u00fcber folgende Formel realisiert::\n\n new_value = (bias + orig_value) * gain_mul / gain_div\n\nF\u00fcr die Implementierung einer eigenen Kalibriersoftware sollte beachtet werden,\ndass zuerst die bisherige Kalibrierung r\u00fcckg\u00e4ngig gemacht werden muss (Versatz\nauf 0 und Verst\u00e4rkung auf 1/1 setzen) und das \u00fcber mehrere tausend Werte\ngemittelt werden sollte um ein benutzbares Ergebnis zu erhalten.\n\nDer Versatz des Gyroskops ist sehr temperaturabh\u00e4ngig und daher muss die\nKalibrierung des Versatzes mit zwei unterschiedlichen Temperaturen erfolgen.\nDie Werte ``xl``, ``yl``, ``zl`` und ``temp l`` sind der Versatz f\u00fcr ``x``,\n``y``, ``z`` und die zugeh\u00f6rige geringe Temperatur. Die Werte ``xh``, ``yh``,\n``zh`` und ``temp h`` sind entsprechend f\u00fcr eine h\u00f6here Temperatur. Die\nTemperaturdifferenz sollte mindestens 5\u00b0C betragen. Die \u00fcbliche\nBetriebstemperatur des IMU Brick sollte einer der Kalibrierpunkte sein.\n\n.. note::\n Wir empfehlen dringend den Brick Viewer zur Kalibrierung des IMU Brick zu verwenden.\n",
                    "en": "\nThere are several different types that can be calibrated:\n\n.. csv-table::\n :header: \"Type\", \"Description\", \"Values\"\n :widths: 10, 30, 110\n\n \"0\",    \"Accelerometer Gain\", \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"1\",    \"Accelerometer Bias\", \"``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``\"\n \"2\",    \"Magnetometer Gain\",  \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"3\",    \"Magnetometer Bias\",  \"``[bias x, bias y, bias z, 0, 0, 0, 0, 0, 0, 0]``\"\n \"4\",    \"Gyroscope Gain\",     \"``[mul x, mul y, mul z, div x, div y, div z, 0, 0, 0, 0]``\"\n \"5\",    \"Gyroscope Bias\",     \"``[bias xl, bias yl, bias zl, temp l, bias xh, bias yh, bias zh, temp h, 0, 0]``\"\n\nThe calibration via gain and bias is done with the following formula::\n\n new_value = (bias + orig_value) * gain_mul / gain_div\n\nIf you really want to write your own calibration software, please keep\nin mind that you first have to undo the old calibration (set bias to 0 and\ngain to 1/1) and that you have to average over several thousand values\nto obtain a usable result in the end.\n\nThe gyroscope bias is highly dependent on the temperature, so you have to\ncalibrate the bias two times with different temperatures. The values ``xl``,\n``yl``, ``zl`` and ``temp l`` are the bias for ``x``, ``y``, ``z`` and the\ncorresponding temperature for a low temperature. The values ``xh``, ``yh``,\n``zh`` and ``temp h`` are the same for a high temperatures. The temperature\ndifference should be at least 5\u00b0C. If you have a temperature where the\nIMU Brick is mostly used, you should use this temperature for one of the\nsampling points.\n\n.. note::\n We highly recommend that you use the Brick Viewer to calibrate your\n IMU Brick.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "function"
        },
        {
            "elements": [
                [
                    "typ",
                    "uint8",
                    1,
                    "in",
                    [
                        "CalibrationType",
                        "calibration_type",
                        [
                            [
                                "AccelerometerGain",
                                "accelerometer_gain",
                                0
                            ],
                            [
                                "AccelerometerBias",
                                "accelerometer_bias",
                                1
                            ],
                            [
                                "MagnetometerGain",
                                "magnetometer_gain",
                                2
                            ],
                            [
                                "MagnetometerBias",
                                "magnetometer_bias",
                                3
                            ],
                            [
                                "GyroscopeGain",
                                "gyroscope_gain",
                                4
                            ],
                            [
                                "GyroscopeBias",
                                "gyroscope_bias",
                                5
                            ]
                        ]
                    ]
                ],
                [
                    "data",
                    "int16",
                    10,
                    "out"
                ]
            ],
            "name": [
                "GetCalibration",
                "get_calibration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Kalibrierung f\u00fcr den ausgew\u00e4hlten Typ zur\u00fcck, wie von :func:`SetCalibration` gesetzt.\n",
                    "en": "\nReturns the calibration for a given type as set by :func:`SetCalibration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetAccelerationPeriod",
                "set_acceleration_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Acceleration` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Acceleration` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 19,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAccelerationPeriod",
                "get_acceleration_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetAccelerationPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetAccelerationPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 20,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetMagneticFieldPeriod",
                "set_magnetic_field_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`MagneticField` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n",
                    "en": "\nSets the period in ms with which the :func:`MagneticField` callback is triggered\nperiodically. A value of 0 turns the callback off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 21,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMagneticFieldPeriod",
                "get_magnetic_field_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetMagneticFieldPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetMagneticFieldPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 22,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetAngularVelocityPeriod",
                "set_angular_velocity_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`AngularVelocity` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n",
                    "en": "\nSets the period in ms with which the :func:`AngularVelocity` callback is triggered\nperiodically. A value of 0 turns the callback off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 23,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAngularVelocityPeriod",
                "get_angular_velocity_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetAngularVelocityPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetAngularVelocityPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 24,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetAllDataPeriod",
                "set_all_data_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`AllData` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n",
                    "en": "\nSets the period in ms with which the :func:`AllData` callback is triggered\nperiodically. A value of 0 turns the callback off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 25,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAllDataPeriod",
                "get_all_data_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetAllDataPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetAllDataPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 26,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetOrientationPeriod",
                "set_orientation_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Orientation` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n",
                    "en": "\nSets the period in ms with which the :func:`Orientation` callback is triggered\nperiodically. A value of 0 turns the callback off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 27,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetOrientationPeriod",
                "get_orientation_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetOrientationPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetOrientationPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 28,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetQuaternionPeriod",
                "set_quaternion_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Quaternion` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n",
                    "en": "\nSets the period in ms with which the :func:`Quaternion` callback is triggered\nperiodically. A value of 0 turns the callback off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 29,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetQuaternionPeriod",
                "get_quaternion_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetQuaternionPeriod` gesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetQuaternionPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 30,
            "type": "function"
        },
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Acceleration",
                "acceleration"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetAccelerationPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Beschleunigungen der X, Y und Z-Achse.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetAccelerationPeriod`. The :word:`parameters` are the acceleration\nfor the x, y and z axis.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 31,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "MagneticField",
                "magnetic_field"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetMagneticFieldPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Magnetfeldkomponenten der X, Y und Z-Achse.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetMagneticFieldPeriod`. The :word:`parameters` are the magnetic field\nfor the x, y and z axis.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 32,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "z",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "AngularVelocity",
                "angular_velocity"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetAngularVelocityPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Winkelgeschwindigkeiten der X, Y und Z-Achse.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetAngularVelocityPeriod`. The :word:`parameters` are the angular velocity\nfor the x, y and z axis.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 33,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "acc_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "acc_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "acc_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "mag_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_x",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_y",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "ang_z",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "AllData",
                "all_data"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetAllDataPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Beschleunigungen, Magnetfeldkomponenten\nund die Winkelgeschwindigkeiten der X, Y und Z-Achse sowie die Temperatur\ndes IMU Brick.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetAllDataPeriod`. The :word:`parameters` are the acceleration,\nthe magnetic field and the angular velocity for the x, y and z axis as\nwell as the temperature of the IMU Brick.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 34,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "roll",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "pitch",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "yaw",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Orientation",
                "orientation"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetOrientationPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Orientierung (Roll-, Nick-, Gierwinkel) des\nIMU Brick in Eulerwinkeln. Siehe :func:`GetOrientation` f\u00fcr Details.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetOrientationPeriod`. The :word:`parameters` are the orientation\n(roll, pitch and yaw) of the IMU Brick in Euler angles. See\n:func:`GetOrientation` for details.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 35,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "x",
                    "float",
                    1,
                    "out"
                ],
                [
                    "y",
                    "float",
                    1,
                    "out"
                ],
                [
                    "z",
                    "float",
                    1,
                    "out"
                ],
                [
                    "w",
                    "float",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Quaternion",
                "quaternion"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetQuaternionPeriod`,\nausgel\u00f6st. Die :word:`parameters` sind die Orientierung (x, y, z, w) des\nIMU Brick in Quaternionen. Siehe :func:`GetQuaternion` f\u00fcr Details.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetQuaternionPeriod`. The :word:`parameters` are the orientation\n(x, y, z, w) of the IMU Brick in quaternions. See :func:`GetQuaternion`\nfor details.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 36,
            "type": "callback"
        },
        {
            "elements": [],
            "name": [
                "OrientationCalculationOn",
                "orientation_calculation_on"
            ],
            "doc": [
                "af",
                {
                    "de": "\nAktiviert die Orientierungsberechnungen des IMU Brick.\n\nStandardm\u00e4\u00dfig sind die Berechnungen an.\n",
                    "en": "\nTurns the orientation calculation of the IMU Brick on.\n\nAs default the calculation is on.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                2
            ],
            "function_id": 37,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "OrientationCalculationOff",
                "orientation_calculation_off"
            ],
            "doc": [
                "af",
                {
                    "de": "\nDeaktiviert die Orientierungsberechnungen des IMU Brick.\n\nWenn die Berechnungen deaktiviert sind, gibt :func:`GetOrientation` solange\nden letzten berechneten Wer zur\u00fcck bis die Berechnungen wieder\naktiviert werden.\n\nDie trigonometrischen Funktionen die zur Berechnung der Orientierung\nben\u00f6tigt werden sind sehr teuer. Wir empfehlen die Orientierungsberechnungen\nzu deaktivieren wenn sie nicht ben\u00f6tigt werden. Dadurch wird mehr\nRechenzeit f\u00fcr den Sensorfusions-Algorithmus freigegeben.\n\nStandardm\u00e4\u00dfig sind die Berechnungen an.\n",
                    "en": "\nTurns the orientation calculation of the IMU Brick off.\n\nIf the calculation is off, :func:`GetOrientation` will return\nthe last calculated value until the calculation is turned on again.\n\nThe trigonometric functions that are needed to calculate the orientation \nare very expensive. We recommend to turn the orientation calculation\noff if the orientation is not needed, to free calculation time for the\nsensor fusion algorithm.\n\nAs default the calculation is on.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                2
            ],
            "function_id": 38,
            "type": "function"
        },
        {
            "elements": [
                [
                    "orientation_calculation_on",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "IsOrientationCalculationOn",
                "is_orientation_calculation_on"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt zur\u00fcck ob die Orientierungsberechnungen des IMU Brick aktiv sind. \n",
                    "en": "\nReturns *true* if the orientation calculation of the IMU Brick\nis on, *false* otherwise.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                2
            ],
            "function_id": 39,
            "type": "function"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "EnableStatusLED",
                "enable_status_led"
            ],
            "doc": [
                "af",
                {
                    "de": "\nAktiviert die Status LED.\n\nDie Status LED ist die blaue LED neben dem USB-Stecker. Wenn diese aktiviert\nist, ist sie an und sie flackert wenn Daten transferiert werden. Wenn sie\ndeaktiviert ist, ist sie immer aus.\n\nDer Standardzustand ist aktiviert.\n",
                    "en": "\nEnables the status LED.\n\nThe status LED is the blue LED next to the USB connector. If enabled is is\non and it flickers if data is transfered. If disabled it is always off.\n\nThe default state is enabled.\n"
                }
            ],
            "since_firmware": [
                2,
                3,
                1
            ],
            "function_id": 238,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "DisableStatusLED",
                "disable_status_led"
            ],
            "doc": [
                "af",
                {
                    "de": "\nDeaktiviert die Status LED.\n\nDie Status LED ist die blaue LED neben dem USB-Stecker. Wenn diese aktiviert\nist, ist sie an und sie flackert wenn Daten transferiert werden. Wenn sie\ndeaktiviert ist, ist sie immer aus.\n\nDer Standardzustand ist aktiviert.\n",
                    "en": "\nDisables the status LED.\n\nThe status LED is the blue LED next to the USB connector. If enabled is is\non and it flickers if data is transfered. If disabled it is always off.\n\nThe default state is enabled.\n"
                }
            ],
            "since_firmware": [
                2,
                3,
                1
            ],
            "function_id": 239,
            "type": "function"
        },
        {
            "elements": [
                [
                    "enabled",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "IsStatusLEDEnabled",
                "is_status_led_enabled"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt *true* zur\u00fcck wenn die Status LED aktiviert ist, *false* sonst.\n",
                    "en": "\nReturns *true* if the status LED is enabled, *false* otherwise.\n"
                }
            ],
            "since_firmware": [
                2,
                3,
                1
            ],
            "function_id": 240,
            "type": "function"
        },
        {
            "elements": [
                [
                    "port",
                    "char",
                    1,
                    "in"
                ],
                [
                    "protocol_version",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "name",
                    "string",
                    40,
                    "out"
                ]
            ],
            "name": [
                "GetProtocol1BrickletName",
                "get_protocol1_bricklet_name"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Firmware und Protokoll Version und den Namen des Bricklets f\u00fcr einen\ngegebenen Port zur\u00fcck.\n\nDer einzige Zweck dieser Funktion ist es, automatischen Flashen von Bricklet\nv1.x.y Plugins zu erm\u00f6glichen.\n",
                    "en": "\nReturns the firmware and protocol version and the name of the Bricklet for a\ngiven port.\n\nThis functions sole purpose is to allow automatic flashing of v1.x.y Bricklet\nplugins.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 241,
            "type": "function"
        },
        {
            "elements": [
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetChipTemperature",
                "get_chip_temperature"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Temperatur in \u00b0C/10, gemessen im Mikrocontroller, aus. Der\nR\u00fcckgabewert ist nicht die Umgebungstemperatur.\n\nDie Temperatur ist lediglich proportional zur echten Temperatur und hat eine\nGenauigkeit von +-15%. Daher beschr\u00e4nkt sich der praktische Nutzen auf die\nIndikation von Temperaturver\u00e4nderungen.\n",
                    "en": "\nReturns the temperature in \u00b0C/10 as measured inside the microcontroller. The\nvalue returned is not the ambient temperature!\n\nThe temperature is only proportional to the real temperature and it has an\naccuracy of +-15%. Practically it is only useful as an indicator for\ntemperature changes.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                7
            ],
            "function_id": 242,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "Reset",
                "reset"
            ],
            "doc": [
                "af",
                {
                    "de": "\nEin Aufruf dieser Funktion setzt den Brick zur\u00fcck. Befindet sich der Brick\ninnerhalb eines Stapels wird der gesamte Stapel zur\u00fcck gesetzt.\n\nNach dem Zur\u00fccksetzen ist es notwendig neue Ger\u00e4teobjekte zu erzeugen,\nFunktionsaufrufe auf bestehende f\u00fchrt zu undefiniertem Verhalten.\n",
                    "en": "\nCalling this function will reset the Brick. Calling this function\non a Brick inside of a stack will reset the whole stack.\n\nAfter a reset you have to create new device objects,\ncalling functions on the existing ones will result in\nundefined behavior!\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                7
            ],
            "function_id": 243,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der der Brick verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann '0'-'8' (Stack Position) sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Brick is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be '0'-'8' (stack position).\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 16,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        1
    ],
    "name": [
        "IMU",
        "imu",
        "IMU",
        "IMU Brick"
    ]
}