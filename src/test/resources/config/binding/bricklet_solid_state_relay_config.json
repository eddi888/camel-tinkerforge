{
    "category": "Bricklet",
    "description": {
        "de": "Schaltet AC und DC Halbleiterrelais (Solid State Relais)",
        "en": "Controls AC and DC Solid State Relays"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "State",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set State",
            "doc": [
                "bf",
                {
                    "de": "\nSetzt den Zustand des Relais, *true* bedeutet ein und *false* aus.\n\nLaufende Monoflop Timer werden \u00fcberschrieben wenn diese Funktion aufgerufen wird.\n\nDer Standardwert ist *false*.\n",
                    "en": "\nSets the state of the relays *true* means on and *false* means off. \n\nRunning monoflop timers will be overwritten if this function is called.\n\nThe default value is *false*.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "State",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get State",
            "doc": [
                "bf",
                {
                    "de": "\nGibt den Zustand der Relais zur\u00fcck, *true* bedeutet ein und *false* aus.\n",
                    "en": "\nReturns the state of the relay, *true* means on and *false* means off. \n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "State",
                    "bool",
                    1,
                    "in"
                ],
                [
                    "Time",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Monoflop",
            "doc": [
                "af",
                {
                    "de": "\nDer erste Parameter ist der gew\u00fcnschte Zustand des Relais \n(*true* bedeutet ein und *false* aus). Der zweite Parameter stellt die Zeit \n(in ms) dar, welche das Relais den Zustand halten soll.\n\nWenn diese Funktion mit den Parametern (true, 1500) aufgerufen wird:\nDas Relais wird angeschaltet und nach 1,5s wieder ausgeschaltet.\n\nEin Monoflop kann als Ausfallsicherung verwendet werden. Beispiel:\nAngenommen ein RS485 Bus und ein Dual Relay Bricklet ist an ein Slave Stapel \nverbunden. Jetzt kann diese Funktion sek\u00fcndlich, mit einem Zeitparameter \nvon 2 Sekunden, aufgerufen werden.\nDas Relais wird die gesamte Zeit ein sein. Wenn jetzt die RS485 Verbindung \ngetrennt wird, wird das Relais nach sp\u00e4testens zwei Sekunden ausschalten.\n",
                    "en": "\nThe first parameter  is the desired state of the relay (*true* means on \nand *false* means off). The second parameter indicates the time (in ms) that \nthe relay should hold the state.\n\nIf this function is called with the parameters (true, 1500):\nThe relay will turn on and in 1.5s it will turn off again.\n\nA monoflop can be used as a failsafe mechanism. For example: Lets assume you \nhave a RS485 bus and a Solid State Relay Bricklet connected to one of the slave \nstacks. You can now call this function every second, with a time parameter\nof two seconds. The relay will be on all the time. If now the RS485 \nconnection is lost, the relay will turn off in at most two seconds.\n"
                }
            ],
            "since_firmware": [
                1,
                1,
                1
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "State",
                    "bool",
                    1,
                    "out"
                ],
                [
                    "Time",
                    "uint32",
                    1,
                    "out"
                ],
                [
                    "Time Remaining",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Monoflop",
            "doc": [
                "af",
                {
                    "de": "\nGibt den aktuellen Zustand und die Zeit, wie von \n:func:`SetMonoflop` gesetzt, sowie die noch verbleibende Zeit bis zum \nZustandswechsel, zur\u00fcck.\n\nWenn der Timer aktuell nicht l\u00e4uft, ist die noch verbleibende Zeit 0.\n",
                    "en": "\nReturns the current state and the time as set by \n:func:`SetMonoflop` as well as the remaining time until the state flips.\n\nIf the timer is not running currently, the remaining time will be returned\nas 0.\n"
                }
            ],
            "since_firmware": [
                1,
                1,
                1
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "State",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Monoflop Done",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn ein Monoflop Timer abl\u00e4uft (0 erreicht).\nDer Parameter ist der aktuellen Zustand des Relais \n(der Zustand nach dem Monoflop).\n",
                    "en": "\nThis callback is triggered whenever the monoflop timer reaches 0. \nThe parameter is the current state of the relay \n(the state after the monoflop).\n"
                }
            ],
            "since_firmware": [
                1,
                1,
                1
            ],
            "function_id": 5,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 244,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "loop_header",
                    5,
                    "Turn relay on/off 10 times with 1 second delay"
                ],
                [
                    "sleep",
                    1000,
                    null,
                    null
                ],
                [
                    "setter",
                    "Set State",
                    [
                        [
                            "bool",
                            true
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "sleep",
                    1000,
                    null,
                    null
                ],
                [
                    "setter",
                    "Set State",
                    [
                        [
                            "bool",
                            false
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "loop_footer"
                ]
            ],
            "name": "Simple"
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Solid State Relay",
        "Solid State Relay",
        "Solid State Relay Bricklet"
    ]
}