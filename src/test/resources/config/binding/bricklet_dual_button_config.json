{
    "category": "Bricklet",
    "description": "Device with two buttons and two LEDs",
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "led_l",
                    "uint8",
                    1,
                    "in",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ],
                [
                    "led_r",
                    "uint8",
                    1,
                    "in",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetLEDState",
                "set_led_state"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nSetzt den Zustand der LEDs. M\u00f6glich Zust\u00e4nde sind:\n\n* 0 = AutoToggleOn: Aktiviert Auto-Toggle und anf\u00e4nglich aktiviert LED\n* 1 = AutoToggleOff: Aktiviert Auto-Toggle und anf\u00e4nglich deaktiviert LED.\n* 2 = On: Aktiviert LED (Auto-Toggle is deaktiviert).\n* 3 = Off: Deaktiviert LED (Auto-Toggle is deaktiviert).\n\nIm Auto-Toggle Modus wechselt die LED automatisch zwischen aus und an bei jedem\nTasterdruck.\n\nWenn nur eine der LEDs gesetzt werden soll und der aktuelle Zustand der anderen LED\nnicht bekannt ist, dann kann der Zustand mit :func:`GetLEDState` ausgelesen werden oder\nes kann :func:`SetSelectedLEDState` genutzt werden.\n\nDer Standardwert ist (1, 1).\n",
                    "en": "\nSets the state of the LEDs. Possible states are:\n\n* 0 = AutoToggleOn: Enables auto toggle with initially enabled LED.\n* 1 = AutoToggleOff: Activates auto toggle with initially disabled LED.\n* 2 = On: Enables LED (auto toggle is disabled).\n* 3 = Off: Disables LED (auto toggle is disabled).\n\nIn auto toggle mode the LED is toggled automatically at each press of a button.\n\nIf you just want to set one of the LEDs and don't know the current state\nof the other LED, you can get the state with :func:`GetLEDState` or you\ncan use :func:`SetSelectedLEDState`.\n\nThe default value is (1, 1).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "led_l",
                    "uint8",
                    1,
                    "out",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ],
                [
                    "led_r",
                    "uint8",
                    1,
                    "out",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetLEDState",
                "get_led_state"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt den aktuellen Zustand der LEDs zur\u00fcck, wie von :func:`SetLEDState` gesetzt.\n",
                    "en": "\nReturns the current state of the LEDs, as set by :func:`SetLEDState`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "button_l",
                    "uint8",
                    1,
                    "out",
                    [
                        "ButtonState",
                        "button_state",
                        [
                            [
                                "Pressed",
                                "pressed",
                                0
                            ],
                            [
                                "Released",
                                "released",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "button_r",
                    "uint8",
                    1,
                    "out",
                    [
                        "ButtonState",
                        "button_state",
                        [
                            [
                                "Pressed",
                                "pressed",
                                0
                            ],
                            [
                                "Released",
                                "released",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetButtonState",
                "get_button_state"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt den aktuellen Zustand beider Taster zur\u00fcck. M\u00f6gliche\nZust\u00e4nde sind:\n\n* 0 = pressed (gedr\u00fcckt)\n* 1 = released (losgelassen)\n",
                    "en": "\nReturns the current state for both buttons. Possible states are:\n\n* 0 = pressed\n* 1 = released\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "button_l",
                    "uint8",
                    1,
                    "out",
                    [
                        "ButtonState",
                        "button_state",
                        [
                            [
                                "Pressed",
                                "pressed",
                                0
                            ],
                            [
                                "Released",
                                "released",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "button_r",
                    "uint8",
                    1,
                    "out",
                    [
                        "ButtonState",
                        "button_state",
                        [
                            [
                                "Pressed",
                                "pressed",
                                0
                            ],
                            [
                                "Released",
                                "released",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "led_l",
                    "uint8",
                    1,
                    "out",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ],
                [
                    "led_r",
                    "uint8",
                    1,
                    "out",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "StateChanged",
                "state_changed"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird aufgerufen wenn einer der Taster gedr\u00fcckt wird.\n\nM\u00f6gliche Zust\u00e4nde der Taster sind:\n\n* 0 = pressed (gedr\u00fcckt)\n* 1 = released (losgelassen)\n\nM\u00f6gliche Zust\u00e4nde der LEDs sind:\n\n* 0 = AutoToggleOn: Auto-Toggle aktiv und LED an.\n* 1 = AutoToggleOff: Auto-Toggle aktiv und LED aus.\n* 2 = On: Aktiviert LED (Auto-Toggle ist deaktiviert).\n* 3 = Off: Deaktiviert LED (Auto-Toggle ist deaktiviert).\n",
                    "en": "\nThis callback is called whenever a button is pressed. \n\nPossible states for buttons are:\n\n* 0 = pressed\n* 1 = released\n\nPossible states for LEDs are:\n\n* 0 = AutoToggleOn: Auto toggle enabled and LED on.\n* 1 = AutoToggleOff: Auto toggle enabled and LED off.\n* 2 = On: LED on (auto toggle is disabled).\n* 3 = Off: LED off (auto toggle is disabled).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "led",
                    "uint8",
                    1,
                    "in",
                    [
                        "LED",
                        "led",
                        [
                            [
                                "Left",
                                "left",
                                0
                            ],
                            [
                                "Right",
                                "right",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "state",
                    "uint8",
                    1,
                    "in",
                    [
                        "LEDState",
                        "led_state",
                        [
                            [
                                "AutoToggleOn",
                                "auto_toggle_on",
                                0
                            ],
                            [
                                "AutoToggleOff",
                                "auto_toggle_off",
                                1
                            ],
                            [
                                "On",
                                "on",
                                2
                            ],
                            [
                                "Off",
                                "off",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetSelectedLEDState",
                "set_selected_led_state"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt den Zustand der selektierten LED (0 oder 1).\n\nDie andere LED bleibt unangetastet.\n",
                    "en": "\nSets the state of the selected LED (0 or 1). \n\nThe other LED remains untouched.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist werder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 230,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "DualButton",
        "dual_button",
        "Dual Button"
    ]
}