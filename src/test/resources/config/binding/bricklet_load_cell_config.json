{
    "category": "Bricklet",
    "description": {
        "de": "Misst Gewicht mit einer W\u00e4gezelle",
        "en": "Measures weight with a load cell"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "weight",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetWeight",
                "get_weight"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt das aktuell gemessene Gewicht in Gramm zur\u00fcck.\n\nWenn das Gewicht periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Weight` zu nutzen und die Periode mit \n:func:`SetWeightCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the currently measured weight in grams.\n\nIf you want to get the weight periodically, it is recommended \nto use the callback :func:`Weight` and set the period with \n:func:`SetWeightCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetWeightCallbackPeriod",
                "set_weight_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Weight` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Weight` wird nur ausgel\u00f6st wenn sich das Gewicht seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Weight` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Weight` is only triggered if the weight has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetWeightCallbackPeriod",
                "get_weight_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetWeightCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetWeightCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetWeightCallbackThreshold",
                "set_weight_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`WeightReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn das Gewicht *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn das Gewicht *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn das Gewicht kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn das Gewicht gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`WeightReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the weight is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the weight is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the weight is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the weight is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetWeightCallbackThreshold",
                "get_weight_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetWeightCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetWeightCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDebouncePeriod",
                "set_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callback\n\n* :func:`WeightReached`\n \nausgel\u00f6st wird, wenn der Schwellwert \n\n* :func:`SetWeightCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`WeightReached`\n\nis triggered, if the threshold\n\n* :func:`SetWeightCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDebouncePeriod",
                "get_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "average",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetMovingAverage",
                "set_moving_average"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt die L\u00e4nge eines `gleitenden Mittelwerts <https://de.wikipedia.org/wiki/Gleitender_Mittelwert>`__\nf\u00fcr den Gewichtswert.\n\nWenn die L\u00e4nge auf 1 gesetzt wird, ist das Averaging aus. Desto kleiner\ndie L\u00e4nge des Mittelwerts ist, desto mehr Rauschen ist auf den Daten.\n\nDer Wertebereich liegt bei 1-40.\n\nDer Standardwert ist 4.\n",
                    "en": "\nSets the length of a `moving averaging <https://en.wikipedia.org/wiki/Moving_average>`__\nfor the weight value.\n\nSetting the length to 1 will turn the averaging off. With less\naveraging, there is more noise on the data.\n\nThe range for the averaging is 1-40.\n\nThe default value is 4.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "average",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMovingAverage",
                "get_moving_average"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die L\u00e4nge des gleitenden Mittelwerts zur\u00fcck, wie von \n:func:`SetMovingAverage` gesetzt.\n",
                    "en": "\nReturns the length moving average as set by :func:`SetMovingAverage`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "LEDOn",
                "led_on"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nAktiviert die LED.\n",
                    "en": "\nTurns the LED on.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "LEDOff",
                "led_off"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nDeaktiviert die LED.\n",
                    "en": "\nTurns the LED off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "value",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "IsLEDOn",
                "is_led_on"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt *true* zur\u00fcck wenn die LED aktiviert ist, *false* sonst.\n",
                    "en": "\nReturns *true* if the led is on, *false* otherwise.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "weight",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "Calibrate",
                "calibrate"
            ],
            "doc": [
                "af",
                {
                    "de": "\nZum Kalibrieren des Load Cell Bricklet m\u00fcssen die folgenden zwei \nSchritte durchgef\u00fchrt werden:\n\n* Die Waage leeren und die Funktion mit 0 aufrufen.\n* Eine bekanntes gewicht auf die Waage legen und die Funktion mit dem\n  Gewicht in Gramm aufrufen.\n\nDie Kalibrierung wird auf dem EEPROM des Bricklets gespeichert und muss\nnur einmal gesetzt werden.\n\nWir empfehlen die Kalibrierung \u00fcber den Brick Viewer zu setzen, diese\nFunktion muss nicht im Quelltext genutzt werden.\n",
                    "en": "\nTo calibrate your Load Cell Bricklet you have to\n\n* empty the scale and call this function with 0 and\n* add a known weight to the scale and call this function with the weight in \n  grams.\n\nThe calibration is saved in the EEPROM of the Bricklet and only\nneeds to be done once.\n\nWe recommend to use the Brick Viewer for calibration, you don't need\nto call this function in your source code.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "Tare",
                "tare"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nSetzt das aktuell gemessene Gewicht als Leergewicht.\n",
                    "en": "\nSets the currently measured weight as tare weight.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "in",
                    [
                        "Rate",
                        "rate",
                        [
                            [
                                "10Hz",
                                "10hz",
                                0
                            ],
                            [
                                "80Hz",
                                "80hz",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "gain",
                    "uint8",
                    1,
                    "in",
                    [
                        "Gain",
                        "gain",
                        [
                            [
                                "128x",
                                "128x",
                                0
                            ],
                            [
                                "64x",
                                "64x",
                                1
                            ],
                            [
                                "32x",
                                "32x",
                                2
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetConfiguration",
                "set_configuration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nF\u00fcr die Messungen sind Rate und Gain konfigurierbar.\n\nDie Rate kann auf 10Hz oder 80Hz gesetzt werden. Eine schnellere Rate\nerzeugt mehr St\u00f6rungen. Zus\u00e4tzlich ist es m\u00f6glich einen gleitenden\nMittelwert auf die Werte anzuwenden (siehe :func:`SetMovingAverage`).\n\nDer Gain kann zwischen 128x, 64x und 32x konfiguriert werden. Er\nrespr\u00e4sentiert einenen Messbereich von \u00b120mV, \u00b140mV und \u00b180mV\nrespektive. Das Load Cell Bricklet nutzt eine\nErregerspannung (Excitation Voltage) von 5V und die meisten W\u00e4gezellen\nhaben eine Ausgabe von 2mV/V. Dies bedeutet, der Spannungsbereich ist\n\u00b115mV f\u00fcr die meisten W\u00e4gezellen (d.h. ein Gain von 128x ist am\ngeeignetsten). Falls nicht klar ist was dies alles bedeutet, ein\nGain von 128x ist h\u00f6chstwahrscheinlich korrekt.\n\nDie Konfiguration wird auf dem EEPROM des Bricklets gespeichert und muss\nnur einmal gesetzt werden.\n\nWir empfehlen die Konfiguration \u00fcber den Brick Viewer zu setzen, diese\nFunktion muss nicht im Quelltext genutzt werden.\n\nDie Standardwerte sind 10Hz f\u00fcr die Rate und 128x f\u00fcr den Gain.\n",
                    "en": "\nThe measurement rate and gain are configurable.\n\nThe rate can be either 10Hz or 80Hz. A faster rate will produce more noise.\nIt is additionally possible to add a moving average\n(see :func:`SetMovingAverage`) to the measurements.\n\nThe gain can be 128x, 64x or 32x. It represents a measurement range of\n\u00b120mV, \u00b140mV and \u00b180mV respectively. The Load Cell Bricklet uses an\nexcitation voltage of 5V and most load cells use an output of 2mV/V. That\nmeans the voltage range is \u00b115mV for most load cells (i.e. gain of 128x\nis best). If you don't know what all of this means you should keep it at \n128x, it will most likely be correct.\n\nThe configuration is saved in the EEPROM of the Bricklet and only\nneeds to be done once.\n\nWe recommend to use the Brick Viewer for configuration, you don't need\nto call this function in your source code.\n\nThe default rate is 10Hz and the default gain is 128x.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "out",
                    [
                        "Rate",
                        "rate",
                        [
                            [
                                "10Hz",
                                "10hz",
                                0
                            ],
                            [
                                "80Hz",
                                "80hz",
                                1
                            ]
                        ]
                    ]
                ],
                [
                    "gain",
                    "uint8",
                    1,
                    "out",
                    [
                        "Gain",
                        "gain",
                        [
                            [
                                "128x",
                                "128x",
                                0
                            ],
                            [
                                "64x",
                                "64x",
                                1
                            ],
                            [
                                "32x",
                                "32x",
                                2
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetConfiguration",
                "get_configuration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`SetConfiguration` gesetzt.\n",
                    "en": "\nReturns the configuration as set by :func:`SetConfiguration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "function"
        },
        {
            "elements": [
                [
                    "weight",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Weight",
                "weight"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetWeightCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist das Gewicht wie von der W\u00e4gezelle gemessen.\n\n:func:`Weight` wird nur ausgel\u00f6st wenn sich das Gewicht seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetWeightCallbackPeriod`. The :word:`parameter` is the weight\nas measured by the load cell.\n\n:func:`Weight` is only triggered if the weight has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "weight",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "WeightReached",
                "weight_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetWeightCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist das Gewicht wie von der W\u00e4gezelle gemessen.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetWeightCallbackThreshold` is reached.\nThe :word:`parameter` is the weight as measured by the load cell.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 253,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "LoadCell",
        "load_cell",
        "Load Cell",
        "Load Cell Bricklet"
    ]
}