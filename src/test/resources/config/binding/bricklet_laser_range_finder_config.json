{
    "category": "Bricklet",
    "description": {
        "de": "Misst Entfernung bis zu 40m mit Laser-Licht",
        "en": "Measures distance up to 40m with laser light"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "distance",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDistance",
                "get_distance"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessene Distanz zur\u00fcck. Der Wertebereich ist 0 bis 4000\nund die Werte haben die Einheit cm.\n\nDas Laser Range Finder Bricklet kennt verschiedene Modi. Eine Distanz\nwird nur im Distanzmodus gemessen, siehe :func:`SetMode`. Zus\u00e4tzlich\nmuss der Laser aktiviert werden, siehe :func:`EnableLaser`.\n\nWenn der Entfernungswert periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Distance` zu nutzen und die Periode mit \n:func:`SetDistanceCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the measured distance. The value has a range of 0 to 4000\nand is given in cm.\n\nThe Laser Range Finder Bricklet knows different modes. Distances\nare only measured in the distance measurement mode,\nsee :func:`SetMode`. Also the laser has to be enabled, see\n:func:`EnableLaser`.\n\nIf you want to get the distance periodically, it is recommended to\nuse the callback :func:`Distance` and set the period with \n:func:`SetDistanceCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "velocity",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVelocity",
                "get_velocity"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessene Geschwindigkeit zur\u00fcck. Der Wertebereich ist 0 bis 12700\nund die Werte haben die Einheit 1/100 m/s.\n\nDas Laser Range Finder Bricklet kennt verschiedene Modi. Eine Geschwindigkeit\nwird nur in den Geschwindigkeitsmodi gemessen, siehe :func:`SetMode`. Zus\u00e4tzlich\nmuss der Laser aktiviert werden, siehe :func:`EnableLaser`.\n\nWenn der Geschwindigkeitswert periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Velocity` zu nutzen und die Periode mit \n:func:`SetVelocityCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the measured velocity. The value has a range of 0 to 12700\nand is given in 1/100 m/s.\n\nThe Laser Range Finder Bricklet knows different modes. Velocity \nis only measured in the velocity measurement modes, \nsee :func:`SetMode`. Also the laser has to be enabled, see\n:func:`EnableLaser`.\n\nIf you want to get the velocity periodically, it is recommended to\nuse the callback :func:`Velocity` and set the period with \n:func:`SetVelocityCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDistanceCallbackPeriod",
                "set_distance_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Distance` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Distance` wird nur ausgel\u00f6st wenn sich der Entfernungswert seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Distance` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Distance` is only triggered if the distance value has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDistanceCallbackPeriod",
                "get_distance_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetDistanceCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetDistanceCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetVelocityCallbackPeriod",
                "set_velocity_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Velocity` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Velocity` wird nur ausgel\u00f6st wenn sich der Geschwindigkeitswert seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Velocity` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Velocity` is only triggered if the velocity value has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVelocityCallbackPeriod",
                "get_velocity_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetVelocityCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetVelocityCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "max",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDistanceCallbackThreshold",
                "set_distance_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`DistanceReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn der Entfernungswert *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn der Entfernungswert *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn der Entfernungswert kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn der Entfernungswert gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`DistanceReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the distance value is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the distance value is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the distance value is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the distance value is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "max",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDistanceCallbackThreshold",
                "get_distance_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetDistanceCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetDistanceCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int16",
                    1,
                    "in"
                ],
                [
                    "max",
                    "int16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetVelocityCallbackThreshold",
                "set_velocity_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`VelocityReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn der Geschwindigkeitswert *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn der Geschwindigkeitswert *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn der Geschwindigkeitswert kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn der Geschwindigkeitswert gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`VelocityReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the velocity is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the velocity is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the velocity is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the velocity is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "max",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVelocityCallbackThreshold",
                "get_velocity_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetVelocityCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetVelocityCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDebouncePeriod",
                "set_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callbacks\n\n* :func:`DistanceReached`,\n* :func:`VelocityReached`,\n \nausgel\u00f6st werden, wenn die Schwellwerte \n\n* :func:`SetDistanceCallbackThreshold`,\n* :func:`SetVelocityCallbackThreshold`,\n \nweiterhin erreicht bleiben.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callbacks\n\n* :func:`DistanceReached`,\n* :func:`VelocityReached`,\n\nare triggered, if the thresholds\n\n* :func:`SetDistanceCallbackThreshold`,\n* :func:`SetVelocityCallbackThreshold`,\n\nkeep being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDebouncePeriod",
                "get_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "distance_average_length",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "velocity_average_length",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetMovingAverage",
                "set_moving_average"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt die L\u00e4nge eines `gleitenden Mittelwerts <https://de.wikipedia.org/wiki/Gleitender_Mittelwert>`__\nf\u00fcr die Entfernung und Geschwindigkeit.\n\nWenn die L\u00e4nge auf 0 gesetzt wird, ist das Averaging komplett aus. Desto kleiner\ndie L\u00e4nge des Mittelwerts ist, desto mehr Rauschen ist auf den Daten.\n\nDer Wertebereich liegt bei 0-30.\n\nDer Standardwert ist 10.\n",
                    "en": "\nSets the length of a `moving averaging <https://en.wikipedia.org/wiki/Moving_average>`__\nfor the distance and velocity.\n\nSetting the length to 0 will turn the averaging completely off. With less\naveraging, there is more noise on the data.\n\nThe range for the averaging is 0-30.\n\nThe default value is 10.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [
                [
                    "distance_average_length",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "velocity_average_length",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMovingAverage",
                "get_moving_average"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die L\u00e4nge des gleitenden Mittelwerts zur\u00fcck, wie von \n:func:`SetMovingAverage` gesetzt.\n",
                    "en": "\nReturns the length moving average as set by :func:`SetMovingAverage`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "mode",
                    "uint8",
                    1,
                    "in",
                    [
                        "Mode",
                        "mode",
                        [
                            [
                                "Distance",
                                "distance",
                                0
                            ],
                            [
                                "VelocityMax13ms",
                                "velocity_max_13ms",
                                1
                            ],
                            [
                                "VelocityMax32ms",
                                "velocity_max_32ms",
                                2
                            ],
                            [
                                "VelocityMax64ms",
                                "velocity_max_64ms",
                                3
                            ],
                            [
                                "VelocityMax127ms",
                                "velocity_max_127ms",
                                4
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetMode",
                "set_mode"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nDas LIDAR hat f\u00fcnf verschiedene Modi. Ein Modus ist f\u00fcr\nDistanzmessungen und vier Modi sind f\u00fcr Geschwindigkeitsmessungen\nmit unterschiedlichen Wertebereichen.\n\nDie folgenden Modi k\u00f6nnen genutzt werden:\n\n* 0: Distanz wird gemessen mit Aufl\u00f6sung 1,0 cm und Wertebereich 0-400 cm\n* 1: Geschwindigkeit wird gemessen mit Aufl\u00f6sung 0,1 m/s und Wertebereich 0-12,7 m/s\n* 2: Geschwindigkeit wird gemessen mit Aufl\u00f6sung 0,25 m/s und Wertebereich 0-31,75 m/s\n* 3: Geschwindigkeit wird gemessen mit Aufl\u00f6sung 0,5 m/s und Wertebereich 0-63,5 m/s\n* 4: Geschwindigkeit wird gemessen mit Aufl\u00f6sung 1,0 m/s und Wertebereich 0-127 m/s\n\nDer Standardmodus ist 0 (Distanzmessung).\n",
                    "en": "\nThe LIDAR has five different modes. One mode is for distance\nmeasurements and four modes are for velocity measurements with\ndifferent ranges.\n\nThe following modes are available:\n\n* 0: Distance is measured with resolution 1.0 cm and range 0-400 cm\n* 1: Velocity is measured with resolution 0.1 m/s and range is 0-12.7 m/s\n* 2: Velocity is measured with resolution 0.25 m/s and range is 0-31.75 m/s\n* 3: Velocity is measured with resolution 0.5 m/s and range is 0-63.5 m/s\n* 4: Velocity is measured with resolution 1.0 m/s and range is 0-127 m/s\n\nThe default mode is 0 (distance is measured).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "function"
        },
        {
            "elements": [
                [
                    "mode",
                    "uint8",
                    1,
                    "out",
                    [
                        "Mode",
                        "mode",
                        [
                            [
                                "Distance",
                                "distance",
                                0
                            ],
                            [
                                "VelocityMax13ms",
                                "velocity_max_13ms",
                                1
                            ],
                            [
                                "VelocityMax32ms",
                                "velocity_max_32ms",
                                2
                            ],
                            [
                                "VelocityMax64ms",
                                "velocity_max_64ms",
                                3
                            ],
                            [
                                "VelocityMax127ms",
                                "velocity_max_127ms",
                                4
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetMode",
                "get_mode"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt den Modus zur\u00fcck, wie von :func:`SetMode` gesetzt.\n",
                    "en": "\nReturns the mode as set by :func:`SetMode`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "EnableLaser",
                "enable_laser"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nAktiviert den Laser des LIDAR.\n\nWir empfehlen nach dem aktivieren des Lasers 250ms zu warten bis zum\nersten Aufruf von :func:`GetDistance` um stabile Messwerte zu garantieren.\n",
                    "en": "\nActivates the laser of the LIDAR.\n\nWe recommend that you wait 250ms after enabling the laser before\nthe first call of :func:`GetDistance` to ensure stable measurements.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "function"
        },
        {
            "elements": [],
            "name": [
                "DisableLaser",
                "disable_laser"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nDeaktiviert den Laser des LIDAR.\n",
                    "en": "\nDeactivates the laser of the LIDAR.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "function"
        },
        {
            "elements": [
                [
                    "laser_enabled",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "IsLaserEnabled",
                "is_laser_enabled"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt *true* zur\u00fcck wenn der Laser aktiviert ist, *false* sonst.\n",
                    "en": "\nReturns *true* if the laser is enabled, *false* otherwise.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 19,
            "type": "function"
        },
        {
            "elements": [
                [
                    "distance",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Distance",
                "distance"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetDistanceCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Entfernungswert des Sensors.\n\n:func:`Distance` wird nur ausgel\u00f6st wenn sich der Entfernungswert seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetDistanceCallbackPeriod`. The :word:`parameter` is the distance value\nof the sensor.\n\n:func:`Distance` is only triggered if the distance value has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 20,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "velocity",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Velocity",
                "velocity"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetVelocityCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Geschwindigkeit des Sensors.\n\n:func:`Velocity` wird nur ausgel\u00f6st wenn sich der Geschwindigkeitswert seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetVelocityCallbackPeriod`. The :word:`parameter` is the velocity value\nof the sensor.\n\n:func:`Velocity` is only triggered if the velocity has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 21,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "distance",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "DistanceReached",
                "distance_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetDistanceCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist der Entfernungswert des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetDistanceCallbackThreshold` is reached.\nThe :word:`parameter` is the distance value of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 22,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "velocity",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "VelocityReached",
                "velocity_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetVelocityCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist der Geschwindigkeitswert des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetVelocityCallbackThreshold` is reached.\nThe :word:`parameter` is the velocity value of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 23,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 255,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "LaserRangeFinder",
        "laser_range_finder",
        "Laser Range Finder",
        "Laser Range Finder Bricklet"
    ]
}