{
    "category": "Bricklet",
    "description": {
        "de": "1,68cm (0,66\") OLED mit 64x48 Pixel",
        "en": "1.68cm (0.66\") OLED with 64x48 pixels"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "Data",
                    "uint8",
                    64,
                    "in"
                ]
            ],
            "name": "Write",
            "doc": [
                "bf",
                {
                    "de": "\nF\u00fcgt 64 Byte Daten zu dem mit :func:`NewWindow` gesetztem Fenster hinzu.\n\nJede Zeile hat eine H\u00f6he von 8 Pixeln welche einem Byte Daten entsprechen.\n\nBeispiel: Wenn :func:`NewWindow` mit Spalte (Column) von 0 bis 63 und\nZeile (Row) von 0 bis 5 (das ganze Display) aufgerufen wird, schreibt\njedes :func:`Write` (roter Pfeil) eine Zeile.\n\n.. image:: /Images/Bricklets/bricklet_oled_64x48_display.png\n   :scale: 100 %\n   :alt: Display Pixel Reihenfolge\n   :align: center\n   :target: ../../_images/Bricklets/bricklet_oled_64x48_display.png\n\nDas LSB (D0) von jedem Daten-Byte ist in der Zeile oben und das\nMSB (D7) ist in der Zeile unten.\n\nDer n\u00e4chste Aufruf von :func:`Write` schreibt die zweite Zeile\nusw. Um das ganze Display zu f\u00fcllen muss :func:`Write` 6 mal\naufgerufen werden.\n",
                    "en": "\nAppends 64 byte of data to the window as set by :func:`NewWindow`.\n\nEach row has a height of 8 pixels which corresponds to one byte of data.\n\nExample: if you call :func:`NewWindow` with column from 0 to 63 and row\nfrom 0 to 5 (the whole display) each call of :func:`Write` (red arrow) will\nwrite one row.\n\n.. image:: /Images/Bricklets/bricklet_oled_64x48_display.png\n   :scale: 100 %\n   :alt: Display pixel order\n   :align: center\n   :target: ../../_images/Bricklets/bricklet_oled_64x48_display.png\n\nThe LSB (D0) of each data byte is at the top and the MSB (D7) is at the \nbottom of the row.\n\nThe next call of :func:`Write` will write the second row and so on. To\nfill the whole display you need to call :func:`Write` 6 times.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Column From",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Column To",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Row From",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Row To",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": "New Window",
            "doc": [
                "bf",
                {
                    "de": "\nSetzt das Fenster in welches mit :func:`Write` geschrieben\nwerden kann. Eine Zeile (Row) hat eine H\u00f6he von 8 Pixel.\n\nDie Spalten haben einen Wertebereich von 0 bis 63 und die Zeilen haben\neinen Wertebereich von 0 bis 5.\n",
                    "en": "\nSets the window in which you can write with :func:`Write`. One row\nhas a height of 8 pixels.\n\nThe columns have a range of 0 to 63 and the rows have a range of 0 to 5.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [],
            "name": "Clear Display",
            "doc": [
                "bf",
                {
                    "de": "\nL\u00f6scht den aktuellen Inhalt des mit :func:`NewWindow` gesetztem Fensters.\n",
                    "en": "\nClears the current content of the window as set by :func:`NewWindow`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Contrast",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Invert",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Display Configuration",
            "doc": [
                "af",
                {
                    "de": "\nSetzt die Konfiguration des Displays\n\nEs k\u00f6nnen der Kontrast mit einem Wertebereich von 0 bis 255 gesetzt, sowie die\nFarben (schwarz/wei\u00df) des Displays invertiert werden.\n\nDie Standardwerte sind ein Kontrast von 143 und die Invertierung ist aus.\n",
                    "en": "\nSets the configuration of the display.\n\nYou can set a contrast value from 0 to 255 and you can invert the color\n(black/white) of the display.\n\nThe default values are contrast 143 and inverting off.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Contrast",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "Invert",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Display Configuration",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`SetDisplayConfiguration`\ngesetzt.\n",
                    "en": "\nReturns the configuration as set by :func:`SetDisplayConfiguration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Line",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Position",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Text",
                    "string",
                    13,
                    "in"
                ]
            ],
            "name": "Write Line",
            "doc": [
                "bf",
                {
                    "de": "\nSchreibt einen Text in die angegebene Zeile (0 bis 5) mit einer vorgegebenen\nPosition (0 bis 13). Der Text kann maximal 14 Zeichen lang sein.\n\nBeispiel: (1, 4, \"Hallo\") schreibt *Hallo* in die Mitte der zweiten Zeile\ndes Displays.\n\nEs ist m\u00f6glich zuerst auf das Display mit :func:`Write` zu malen und danach\nText hinzuzuf\u00fcgen.\n\nDas Display nutzt einen speziellen 5x7 Pixel Zeichensatz. Der Zeichensatz\nkann mit Hilfe von Brick Viewer angezeigt werden.\n",
                    "en": "\nWrites text to a specific line (0 to 5) with a specific position \n(0 to 12). The text can have a maximum of 13 characters.\n\nFor example: (1, 4, \"Hello\") will write *Hello* in the middle of the\nsecond line of the display.\n\nYou can draw to the display with :func:`Write` and then add text to it\nafterwards.\n\nThe display uses a special 5x7 pixel charset. You can view the characters \nof the charset in Brick Viewer.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 264,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "setter",
                    "Clear Display",
                    [],
                    "Clear display",
                    null
                ],
                [
                    "setter",
                    "Write Line",
                    [
                        [
                            "uint8",
                            0
                        ],
                        [
                            "uint8",
                            0
                        ],
                        [
                            "string",
                            "Hello World"
                        ]
                    ],
                    "Write \"Hello World\" starting from upper left corner of the screen",
                    null
                ]
            ],
            "name": "Hello World"
        },
        {
            "functions": [
                [
                    "setter",
                    "Clear Display",
                    [],
                    "Clear display",
                    null
                ]
            ],
            "name": "Pixel Matrix",
            "incomplete": true
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "OLED 64x48",
        "OLED 64x48",
        "OLED 64x48 Bricklet"
    ]
}