{
    "category": "Bricklet",
    "description": {
        "de": "Kontaktlose Objekttemperaturmessung zwischen -70\u00b0C und +380\u00b0C",
        "en": "Measures contactless object temperature between -70\u00b0C and +380\u00b0C"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Ambient Temperature",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Umgebungstemperatur des Sensors zur\u00fcck. Der Wertebereich ist von\n-400 bis 1250 und wird in \u00b0C/10 angegeben, z.B. bedeutet \nein Wert von 423 eine gemessene Umgebungstemperatur von 42,3 \u00b0C.\n\nWenn die Umgebungstemperatur periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`AmbientTemperature` zu nutzen und die Periode mit \n:func:`SetAmbientTemperatureCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the ambient temperature of the sensor. The value\nhas a range of -400 to 1250 and is given in \u00b0C/10,\ne.g. a value of 423 means that an ambient temperature of 42.3 \u00b0C is \nmeasured.\n\nIf you want to get the ambient temperature periodically, it is recommended \nto use the callback :func:`AmbientTemperature` and set the period with \n:func:`SetAmbientTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Object Temperature",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Objekttemperatur des Sensors zur\u00fcck, z.B. die Temperatur\nder Oberfl\u00e4che auf welche der Sensor zielt. Der Wertebereich ist von\n-700 bis 3800 und wird in \u00b0C/10 angegeben, z.B. bedeutet \nein Wert von 3001 eine gemessene Temperatur von 300,1 \u00b0C auf der Oberfl\u00e4che\ndes Objektes.\n\nDie Temperatur von unterschiedlichen Materialien ist abh\u00e4ngig von ihrem `Emissionsgrad\n<https://de.wikipedia.org/wiki/Emissionsgrad>`__. Der Emissionsgrad des Materials kann mit\n:func:`SetEmissivity` gesetzt werden.\n\nWenn die Objekttemperatur periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`ObjectTemperature` zu nutzen und die Periode mit \n:func:`SetObjectTemperatureCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the object temperature of the sensor, i.e. the temperature\nof the surface of the object the sensor is aimed at. The value\nhas a range of -700 to 3800 and is given in \u00b0C/10,\ne.g. a value of 3001 means that a temperature of 300.1 \u00b0C is measured\non the surface of the object.\n\nThe temperature of different materials is dependent on their `emissivity \n<https://en.wikipedia.org/wiki/Emissivity>`__. The emissivity of the material\ncan be set with :func:`SetEmissivity`.\n\nIf you want to get the object temperature periodically, it is recommended \nto use the callback :func:`ObjectTemperature` and set the period with \n:func:`SetObjectTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Emissivity",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": "Set Emissivity",
            "doc": [
                "af",
                {
                    "de": "\nSetzt den `Emissionsgrad <https://de.wikipedia.org/wiki/Emissionsgrad>`__,\nwelcher zur Berechnung der Oberfl\u00e4chentemperatur benutzt wird, wie von\n:func:`GetObjectTemperature` zur\u00fcckgegeben.\n\nDer Emissionsgrad wird normalerweise als Wert zwischen 0,0 und 1,0 angegeben.\nEine Liste von Emissionsgraden unterschiedlicher Materialien ist\n`hier <http://www.infrared-thermography.com/material.htm>`__ zu finden.\n\nDer Parameter von :func:`SetEmissivity` muss mit eine Faktor von 65535 (16-Bit)\nvorgegeben werden. Beispiel: Ein Emissionsgrad von 0,1 kann mit dem Wert\n6553 gesetzt werden, ein Emissionsgrad von 0,5 mit dem Wert 32767 und so weiter.\n\n.. note::\n Wenn eine exakte Messung der Objekttemperatur notwendig ist, ist es entscheidend\n eine exakten Emissionsgrad anzugeben.\n \nDer Standard Emissionsgrad ist 1,0 (Wert von 65535) und der minimale\nEmissionsgrad welcher der Sensor verarbeiten kann ist 0,1 (Wert von 6553).\n",
                    "en": "\nSets the `emissivity <https://en.wikipedia.org/wiki/Emissivity>`__ that is\nused to calculate the surface temperature as returned by \n:func:`GetObjectTemperature`. \n\nThe emissivity is usually given as a value between 0.0 and 1.0. A list of\nemissivities of different materials can be found \n`here <http://www.infrared-thermography.com/material.htm>`__.\n\nThe parameter of :func:`SetEmissivity` has to be given with a factor of\n65535 (16-bit). For example: An emissivity of 0.1 can be set with the\nvalue 6553, an emissivity of 0.5 with the value 32767 and so on.\n\n.. note::\n If you need a precise measurement for the object temperature, it is\n absolutely crucial that you also provide a precise emissivity.\n\nThe default emissivity is 1.0 (value of 65535) and the minimum emissivity the\nsensor can handle is 0.1 (value of 6553).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Emissivity",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Emissivity",
            "doc": [
                "af",
                {
                    "de": "\nGibt den Emissionsgrad zur\u00fcck, wie von :func:`SetEmissivity` gesetzt.\n",
                    "en": "\nReturns the emissivity as set by :func:`SetEmissivity`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Ambient Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`AmbientTemperature` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`AmbientTemperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`AmbientTemperature` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`AmbientTemperature` is only triggered if the temperature has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Ambient Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetAmbientTemperatureCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetAmbientTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Object Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`ObjectTemperature` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`ObjectTemperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`ObjectTemperature` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`ObjectTemperature` is only triggered if the temperature has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Object Temperature Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetObjectTemperatureCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetObjectTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int16",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int16",
                    1,
                    "in"
                ]
            ],
            "name": "Set Ambient Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`AmbientTemperatureReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Umgebungstemperatur *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Umgebungstemperatur *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Umgebungstemperatur kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Umgebungstemperatur gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`AmbientTemperatureReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the ambient temperature is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the ambient temperature is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the ambient temperature is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the ambient temperature is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Ambient Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetAmbientTemperatureCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetAmbientTemperatureCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int16",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int16",
                    1,
                    "in"
                ]
            ],
            "name": "Set Object Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`ObjectTemperatureReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Objekttemperatur *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Objekttemperatur *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Objekttemperatur kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Objekttemperatur gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`ObjectTemperatureReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the object temperature is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the object temperature is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the object temperature is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the object temperature is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Object Temperature Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetObjectTemperatureCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetObjectTemperatureCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callbacks\n\n* :func:`AmbientTemperatureReached`,\n* :func:`ObjectTemperatureReached`\n \nausgel\u00f6st werden, wenn die Schwellwerte \n\n* :func:`SetAmbientTemperatureCallbackThreshold`,\n* :func:`SetObjectTemperatureCallbackThreshold`\n \nweiterhin erreicht bleiben.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callbacks\n\n* :func:`AmbientTemperatureReached`,\n* :func:`ObjectTemperatureReached`\n\nare triggered, if the thresholds\n\n* :func:`SetAmbientTemperatureCallbackThreshold`,\n* :func:`SetObjectTemperatureCallbackThreshold`\n\nkeep being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Ambient Temperature",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetAmbientTemperatureCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Temperatur des Sensors.\n\n:func:`AmbientTemperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetAmbientTemperatureCallbackPeriod`. The :word:`parameter` is the ambient\ntemperature of the sensor.\n\n:func:`AmbientTemperature` is only triggered if the ambient temperature\nhas changed since the last triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Object Temperature",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetObjectTemperatureCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Objekttemperatur des Sensors.\n\n:func:`ObjectTemperature` wird nur ausgel\u00f6st wenn sich die Objekttemperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetObjectTemperatureCallbackPeriod`. The :word:`parameter` is the object\ntemperature of the sensor.\n\n:func:`ObjectTemperature` is only triggered if the object temperature\nhas changed since the last triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Ambient Temperature Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetAmbientTemperatureCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Umgebungstemperatur des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetAmbientTemperatureCallbackThreshold` is reached.\nThe :word:`parameter` is the ambient temperature of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": "Object Temperature Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetObjectTemperatureCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Objekttemperatur des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetObjectTemperatureCallbackThreshold` is reached.\nThe :word:`parameter` is the object temperature of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 217,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "getter",
                    [
                        "Get Ambient Temperature",
                        "ambient temperature"
                    ],
                    [
                        [
                            [
                                "Ambient Temperature",
                                "Ambient Temperature"
                            ],
                            "int16",
                            10.0,
                            "\u00b0C/10",
                            "\u00b0C",
                            null
                        ]
                    ],
                    []
                ],
                [
                    "getter",
                    [
                        "Get Object Temperature",
                        "object temperature"
                    ],
                    [
                        [
                            [
                                "Object Temperature",
                                "Object Temperature"
                            ],
                            "int16",
                            10.0,
                            "\u00b0C/10",
                            "\u00b0C",
                            null
                        ]
                    ],
                    []
                ]
            ],
            "name": "Simple"
        },
        {
            "functions": [
                [
                    "callback",
                    [
                        "Object Temperature",
                        "object temperature"
                    ],
                    [
                        [
                            [
                                "Temperature",
                                "Object Temperature"
                            ],
                            "int16",
                            10.0,
                            "\u00b0C/10",
                            "\u00b0C",
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_period",
                    [
                        "Object Temperature",
                        "object temperature"
                    ],
                    [],
                    1000
                ]
            ],
            "name": "Callback"
        },
        {
            "functions": [
                [
                    "setter",
                    "Set Emissivity",
                    [
                        [
                            "uint16",
                            64224
                        ]
                    ],
                    "Set emissivity to 0.98 (emissivity of water, 65535 * 0.98 = 64224.299)",
                    null
                ],
                [
                    "debounce_period",
                    10000
                ],
                [
                    "callback",
                    [
                        "Object Temperature Reached",
                        "object temperature reached"
                    ],
                    [
                        [
                            [
                                "Temperature",
                                "Object Temperature"
                            ],
                            "int16",
                            10.0,
                            "\u00b0C/10",
                            "\u00b0C",
                            null
                        ]
                    ],
                    null,
                    "The water is boiling!"
                ],
                [
                    "callback_threshold",
                    [
                        "Object Temperature",
                        "object temperature"
                    ],
                    [],
                    ">",
                    [
                        [
                            100,
                            0
                        ]
                    ]
                ]
            ],
            "name": "Water Boiling"
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Temperature IR",
        "Temperature IR",
        "Temperature IR Bricklet"
    ]
}