{
    "category": "Bricklet",
    "description": {
        "de": "Misst Leistung, Gleichspannung und Gleichstrom bis zu 720W/36V/20A",
        "en": "Measures power, DC voltage and DC current up to 720W/36V/20A"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "Current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Current",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessenen Stromst\u00e4rke zur\u00fcck. Der Wert ist in mA und im\nBereich von -20000mA bis 20000mA.\n\nWenn die Stromst\u00e4rke periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Current` zu nutzen und die Periode mit \n:func:`SetCurrentCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the current. The value is in mA\nand between -20000mA and 20000mA.\n\nIf you want to get the current periodically, it is recommended to use the\ncallback :func:`Current` and set the period with \n:func:`SetCurrentCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Voltage",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessenen Spannung zur\u00fcck. Der Wert ist in mV und im\nBereich von 0mV bis 36000mV.\n\nWenn die Stromst\u00e4rke periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Voltage` zu nutzen und die Periode mit \n:func:`SetVoltageCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the voltage. The value is in mV\nand between 0mV and 36000mV.\n\nIf you want to get the voltage periodically, it is recommended to use the\ncallback :func:`Voltage` and set the period with \n:func:`SetVoltageCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Power",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Power",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessenen Leistung zur\u00fcck. Der Wert ist in mW und im\nBereich von 0mW bis 720000mW.\n\nWenn die Leistung periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Power` zu nutzen und die Periode mit \n:func:`SetPowerCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the power. The value is in mW\nand between 0mV and 720000mW.\n\nIf you want to get the power periodically, it is recommended to use the\ncallback :func:`Power` and set the period with \n:func:`SetPowerCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Averaging",
                    "uint8",
                    1,
                    "in",
                    [
                        "Averaging",
                        [
                            [
                                "1",
                                0
                            ],
                            [
                                "4",
                                1
                            ],
                            [
                                "16",
                                2
                            ],
                            [
                                "64",
                                3
                            ],
                            [
                                "128",
                                4
                            ],
                            [
                                "256",
                                5
                            ],
                            [
                                "512",
                                6
                            ],
                            [
                                "1024",
                                7
                            ]
                        ]
                    ]
                ],
                [
                    "Voltage Conversion Time",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Current Conversion Time",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": "Set Configuration",
            "doc": [
                "bf",
                {
                    "de": "\nSetzt die Konfiguration des Voltage/Current Bricklet. Es ist\nm\u00f6glich die Anzahl f\u00fcr die Durchschnittsbildung, und die \nWandlungszeit f\u00fcr Spannung und Stromst\u00e4rke zu definieren.\n\nDurchschnittsbildung:\n\n.. csv-table::\n :header: \"Wert\", \"Anzahl\"\n :widths: 20, 20\n\n \"0\",    \"1\"\n \"1\",    \"4\"\n \"2\",    \"16\"\n \"3\",    \"64\"\n \"4\",    \"128\"\n \"5\",    \"256\"\n \"6\",    \"512\"\n \">=7\",  \"1024\"\n\nWandlungszeit f\u00fcr Spannung/Stromst\u00e4rke:\n\n.. csv-table::\n :header: \"Wert\", \"Wandlungszeit\"\n :widths: 20, 20\n\n \"0\",    \"140\u00b5s\"\n \"1\",    \"204\u00b5s\"\n \"2\",    \"332\u00b5s\"\n \"3\",    \"588\u00b5s\"\n \"4\",    \"1.1ms\"\n \"5\",    \"2.116ms\"\n \"6\",    \"4.156ms\"\n \">=7\",  \"8.244ms\"\n\nDie Standardwerte sind 3, 4 und 4 (64, 1.1ms, 1.1ms) f\u00fcr die\nDurchschnittsbildung und die Spannungs/Stromst\u00e4rkenwandlungszeit.\n",
                    "en": "\nSets the configuration of the Voltage/Current Bricklet. It is\npossible to configure number of averages as well as\nvoltage and current conversion time.\n\nAveraging:\n\n.. csv-table::\n :header: \"Value\", \"Number of Averages\"\n :widths: 20, 20\n\n \"0\",    \"1\"\n \"1\",    \"4\"\n \"2\",    \"16\"\n \"3\",    \"64\"\n \"4\",    \"128\"\n \"5\",    \"256\"\n \"6\",    \"512\"\n \">=7\",  \"1024\"\n\nVoltage/Current conversion:\n\n.. csv-table::\n :header: \"Value\", \"Conversion time\"\n :widths: 20, 20\n\n \"0\",    \"140\u00b5s\"\n \"1\",    \"204\u00b5s\"\n \"2\",    \"332\u00b5s\"\n \"3\",    \"588\u00b5s\"\n \"4\",    \"1.1ms\"\n \"5\",    \"2.116ms\"\n \"6\",    \"4.156ms\"\n \">=7\",  \"8.244ms\"\n\nThe default values are 3, 4 and 4 (64, 1.1ms, 1.1ms) for averaging, voltage \nconversion and current conversion.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Averaging",
                    "uint8",
                    1,
                    "out",
                    [
                        "Averaging",
                        [
                            [
                                "1",
                                0
                            ],
                            [
                                "4",
                                1
                            ],
                            [
                                "16",
                                2
                            ],
                            [
                                "64",
                                3
                            ],
                            [
                                "128",
                                4
                            ],
                            [
                                "256",
                                5
                            ],
                            [
                                "512",
                                6
                            ],
                            [
                                "1024",
                                7
                            ]
                        ]
                    ]
                ],
                [
                    "Voltage Conversion Time",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "Current Conversion Time",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": "Get Configuration",
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`SetConfiguration`\ngesetzt.\n",
                    "en": "\nReturns the configuration as set by :func:`SetConfiguration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Gain Multiplier",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "Gain Divisor",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": "Set Calibration",
            "doc": [
                "af",
                {
                    "de": "\nDa der Shunt-Widerstand \u00fcber den die Stromst\u00e4rke gemessen wird keine\nperfekte Genauigkeit hat, ist es n\u00f6tig einen Multiplikator und\neinen Divisor zu setzen falls sehr genaue Messwerte n\u00f6tig sind.\n\nZum Beispiel: Wenn eine Messung von 1000mA erwartet wird, das\nVoltage/Current Bricklet aber 1023mA zur\u00fcck gibt, sollte \nder Multiplikator auf 1000 und der Divisor auf 1023 gesetzt\nwerden.\n",
                    "en": "\nSince the shunt resistor that is used to measure the current is not\nperfectly precise, it needs to be calibrated by a multiplier and\ndivisor if a very precise reading is needed.\n\nFor example, if you are expecting a measurement of 1000mA and you\nare measuring 1023mA, you can calibrate the Voltage/Current Bricklet \nby setting the multiplier to 1000 and the divisor to 1023.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Gain Multiplier",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "Gain Divisor",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Calibration",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Kalibrierung zur\u00fcck, wie von :func:`SetCalibration`\ngesetzt.\n",
                    "en": "\nReturns the calibration as set by :func:`SetCalibration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Current Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Current` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Current` wird nur ausgel\u00f6st wenn sich die Stromst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Current` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Current` is only triggered if the current has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Current Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetCurrentCallbackPeriod`\ngesetzt\n",
                    "en": "\nReturns the period as set by :func:`SetCurrentCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Voltage Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Voltage` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Voltage` wird nur ausgel\u00f6st wenn sich die Spannung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Voltage` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Voltage` is only triggered if the voltage has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Voltage Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetVoltageCallbackPeriod`\ngesetzt\n",
                    "en": "\nReturns the period as set by :func:`SetVoltageCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Power Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Power` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Power` wird nur ausgel\u00f6st wenn sich die Leistung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Power` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Power` is only triggered if the power has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Power Callback Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`GetPowerCallbackPeriod`\ngesetzt\n",
                    "en": "\nReturns the period as set by :func:`GetPowerCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Current Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`CurrentReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`CurrentReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the current is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the current is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the current is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the current is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Current Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetCurrentCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetCurrentCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 15,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Voltage Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`VoltageReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Spannung *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Spannung *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Spannung kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Spannung gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`VoltageReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the voltage is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the voltage is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the voltage is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the voltage is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 16,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Voltage Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetVoltageCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetVoltageCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 17,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "in",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Power Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`PowerReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Leistung *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Leistung *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Leistung kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Leistung gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`PowerReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the power is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the power is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the power is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the power is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 18,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Option",
                    "char",
                    1,
                    "out",
                    [
                        "Threshold Option",
                        [
                            [
                                "Off",
                                "x"
                            ],
                            [
                                "Outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "Min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "Max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Power Callback Threshold",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetPowerCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetPowerCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 19,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": "Set Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callbacks\n\n* :func:`CurrentReached`,\n* :func:`VoltageReached`,\n* :func:`PowerReached`\n \nausgel\u00f6st werden, wenn die Schwellwerte \n\n* :func:`SetCurrentCallbackThreshold`,\n* :func:`SetVoltageCallbackThreshold`,\n* :func:`SetPowerCallbackThreshold`\n \nweiterhin erreicht bleiben.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callbacks\n\n* :func:`CurrentReached`,\n* :func:`VoltageReached`,\n* :func:`PowerReached`\n\nare triggered, if the thresholds\n\n* :func:`SetCurrentCallbackThreshold`,\n* :func:`SetVoltageCallbackThreshold`,\n* :func:`SetPowerCallbackThreshold`\n\nkeep being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 20,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": "Get Debounce Period",
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 21,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Current",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetCurrentCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Stromst\u00e4rke des Sensors.\n\n:func:`Current` wird nur ausgel\u00f6st wenn sich die Stromst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetCurrentCallbackPeriod`. The :word:`parameter` is the current of the\nsensor.\n\n:func:`Current` is only triggered if the current has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 22,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Voltage",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetVoltageCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Spannung des Sensors.\n\n:func:`Voltage` wird nur ausgel\u00f6st wenn sich die Spannung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetVoltageCallbackPeriod`. The :word:`parameter` is the voltage of the\nsensor.\n\n:func:`Voltage` is only triggered if the voltage has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 23,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Power",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Power",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetPowerCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Leistung des Sensors.\n\n:func:`Power` wird nur ausgel\u00f6st wenn sich die Leistung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetPowerCallbackPeriod`. The :word:`parameter` is the power of the\nsensor.\n\n:func:`Power` is only triggered if the power has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 24,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Current Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetCurrentCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Stromst\u00e4rke des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetCurrentCallbackThreshold` is reached.\nThe :word:`parameter` is the current of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 25,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Voltage Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetVoltageCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Spannung des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetVoltageCallbackThreshold` is reached.\nThe :word:`parameter` is the voltage of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 26,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "Power",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": "Power Reached",
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetPowerCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Spannung des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetPowerCallbackThreshold` is reached.\nThe :word:`parameter` is the power of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 27,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "API Version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": "Get API Version",
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": "Get Response Expected",
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Function Id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Response Expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": "Set Response Expected All",
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Connected Uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "Position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "Hardware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Firmware Version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "Device Identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": "Get Identity",
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 227,
    "released": true,
    "examples": [
        {
            "functions": [
                [
                    "getter",
                    [
                        "Get Voltage",
                        "voltage"
                    ],
                    [
                        [
                            [
                                "Voltage",
                                "Voltage"
                            ],
                            "int32",
                            1000.0,
                            "mV",
                            "V",
                            null
                        ]
                    ],
                    []
                ],
                [
                    "getter",
                    [
                        "Get Current",
                        "current"
                    ],
                    [
                        [
                            [
                                "Current",
                                "Current"
                            ],
                            "int32",
                            1000.0,
                            "mA",
                            "A",
                            null
                        ]
                    ],
                    []
                ]
            ],
            "name": "Simple"
        },
        {
            "functions": [
                [
                    "callback",
                    [
                        "Current",
                        "current"
                    ],
                    [
                        [
                            [
                                "Current",
                                "Current"
                            ],
                            "int32",
                            1000.0,
                            "mA",
                            "A",
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_period",
                    [
                        "Current",
                        "current"
                    ],
                    [],
                    1000
                ]
            ],
            "name": "Callback"
        },
        {
            "functions": [
                [
                    "debounce_period",
                    10000
                ],
                [
                    "callback",
                    [
                        "Power Reached",
                        "power reached"
                    ],
                    [
                        [
                            [
                                "Power",
                                "Power"
                            ],
                            "int32",
                            1000.0,
                            "mW",
                            "W",
                            null
                        ]
                    ],
                    null,
                    null
                ],
                [
                    "callback_threshold",
                    [
                        "Power",
                        "power"
                    ],
                    [],
                    ">",
                    [
                        [
                            10,
                            0
                        ]
                    ]
                ]
            ],
            "name": "Threshold"
        }
    ],
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Voltage Current",
        "Voltage/Current",
        "Voltage/Current Bricklet"
    ]
}