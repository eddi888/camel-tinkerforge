{
    "category": "Bricklet",
    "description": "Device for sensing two currents between 0 and 20mA (IEC 60381-1)",
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetCurrent",
                "get_current"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die gemessenen Stromst\u00e4rke des angegebenen Sensors (0 oder 1) zur\u00fcck. Der\nWert ist in nA und im Bereich von 0nA bis 22505322nA (22,5mA).\n\nEs ist m\u00f6glich zu erkennen ob ein IEC 60381-1-kompatibler Sensor angeschlossen\nist und ob er funktionsf\u00e4hig ist.\n\nFalls die zur\u00fcckgegebene Stromst\u00e4rke kleiner als 4mA ist, ist wahrscheinlich\nkein Sensor angeschlossen oder der Sensor ist defekt. Falls die zur\u00fcckgegebene\nStromst\u00e4rke \u00fcber 20mA ist, besteht entweder ein Kurzschluss oder der Sensor\nist defekt. Somit ist erkennbar ob ein Sensor angeschlossen und funktionsf\u00e4hig\nist.\n\nWenn die Stromst\u00e4rke periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Current` zu nutzen und die Periode mit \n:func:`SetCurrentCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the current of the specified sensor (0 or 1). The value is in nA\nand between 0nA and 22505322nA (22.5mA).\n\nIt is possible to detect if an IEC 60381-1 compatible sensor is connected\nand if it works probably.\n\nIf the returned current is below 4mA, there is likely no sensor connected\nor the sensor may be defect. If the returned current is over 20mA, there might\nbe a short circuit or the sensor may be defect.\n\nIf you want to get the current periodically, it is recommended to use the\ncallback :func:`Current` and set the period with \n:func:`SetCurrentCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetCurrentCallbackPeriod",
                "set_current_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Current` Callback f\u00fcr den\n\u00fcbergebenen Sensor ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Current` wird nur ausgel\u00f6st wenn sich die Stromst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0. \n",
                    "en": "\nSets the period in ms with which the :func:`Current` callback is triggered\nperiodically for the given sensor. A value of 0 turns the callback off.\n\n:func:`Current` is only triggered if the current has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetCurrentCallbackPeriod",
                "get_current_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetCurrentCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetCurrentCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetCurrentCallbackThreshold",
                "set_current_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert des :func:`CurrentReached` Callbacks f\u00fcr den \u00fcbergebenen\nSensor.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Stromst\u00e4rke gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`CurrentReached` callback for the given\nsensor.\n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the current is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the current is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the current is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the current is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetCurrentCallbackThreshold",
                "get_current_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetCurrentCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetCurrentCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDebouncePeriod",
                "set_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der Schwellwert Callback\n\n* :func:`CurrentReached`\n \nausgel\u00f6st werden, wenn der Schwellwert\n\n* :func:`SetCurrentCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`CurrentReached`\n\nis triggered, if the threshold\n\n* :func:`SetCurrentCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDebouncePeriod",
                "get_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "in",
                    [
                        "SampleRate",
                        "sample_rate",
                        [
                            [
                                "240SPS",
                                "240_sps",
                                0
                            ],
                            [
                                "60SPS",
                                "60_sps",
                                1
                            ],
                            [
                                "15SPS",
                                "15_sps",
                                2
                            ],
                            [
                                "4SPS",
                                "4_sps",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetSampleRate",
                "set_sample_rate"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt die Abtastrate auf 240, 60, 15 oder 4 Samples pro Sekunde.\nDie Aufl\u00f6sung f\u00fcr die Raten sind 12, 14, 16 und 18 Bit respektive.\n\n.. csv-table::\n :header: \"Wert\", \"Beschreibung\"\n :widths: 10, 100\n\n \"0\",    \"240 Samples pro Sekunde, 12 Bit Aufl\u00f6sung\"\n \"1\",    \"60 Samples pro Sekunde, 14 Bit Aufl\u00f6sung\"\n \"2\",    \"15 Samples pro Sekunde, 16 Bit Aufl\u00f6sung\"\n \"3\",    \"4 Samples pro Sekunde, 18 Bit Aufl\u00f6sung\"\n\nDer Standardwert ist 3: 4 Samples pro Sekunde mit 18 Bit Aufl\u00f6sung.\n",
                    "en": "\nSets the sample rate to either 240, 60, 15 or 4 samples per second.\nThe resolution for the rates is 12, 14, 16 and 18 bit respectively.\n\n.. csv-table::\n :header: \"Value\", \"Description\"\n :widths: 10, 100\n\n \"0\",    \"240 samples per second, 12 bit resolution\"\n \"1\",    \"60 samples per second, 14 bit resolution\"\n \"2\",    \"15 samples per second, 16 bit resolution\"\n \"3\",    \"4 samples per second, 18 bit resolution\"\n\nThe default value is 3: 4 samples per second with 18 bit resolution.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "out",
                    [
                        "SampleRate",
                        "sample_rate",
                        [
                            [
                                "240SPS",
                                "240_sps",
                                0
                            ],
                            [
                                "60SPS",
                                "60_sps",
                                1
                            ],
                            [
                                "15SPS",
                                "15_sps",
                                2
                            ],
                            [
                                "4SPS",
                                "4_sps",
                                3
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetSampleRate",
                "get_sample_rate"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Abtastrate zur\u00fcck, wie von :func:`SetSampleRate`\ngesetzt.\n",
                    "en": "\nReturns the sample rate as set by :func:`SetSampleRate`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Current",
                "current"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetCurrentCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Stromst\u00e4rke des Sensors.\n\n:func:`Current` wird nur ausgel\u00f6st wenn sich die Stromst\u00e4rke seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetCurrentCallbackPeriod`. The :word:`parameter` is the current of the\nsensor.\n\n:func:`Current` is only triggered if the current has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "sensor",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "current",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "CurrentReached",
                "current_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetCurrentCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Stromst\u00e4rke des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetCurrentCallbackThreshold` is reached.\nThe :word:`parameter` is the current of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist werder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 228,
    "released": true,
    "api": {
        "de": "\nEs k\u00f6nnen zwei Sensoren an das Bricklet angeschlossen werden. Funktionen die\nsich direkt auf einen der Sensoren beziehen haben einen ``sensor`` Parameter,\num den Sensor anzugeben. G\u00fcltige Werte f\u00fcr den ``sensor`` Parameter sind 0\nund 1.\n",
        "en": "\nTwo sensors can be connected to the Bricklet. Functions that are related\ndirectly to a sensor have a ``sensor`` parameter to specify one of the two\nsensors. Valid values for the ``sensor`` parameter are 0 and 1.\n"
    },
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "IndustrialDual020mA",
        "industrial_dual_0_20ma",
        "Industrial Dual 0-20mA"
    ]
}