{
    "category": "Bricklet",
    "description": {
        "de": "Misst zwei Gleichspannungen zwischen -35V und +35V mit jeweils 24Bit Aufl\u00f6sung",
        "en": "Measures two DC voltages between -35V and +35V with 24bit resolution each"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVoltage",
                "get_voltage"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Spannung f\u00fcr den \u00fcbergebenen Kanal in mV zur\u00fcck.\n\nWenn die Spannung periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Voltage` zu nutzen und die Periode mit \n:func:`SetVoltageCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the voltage for the given channel in mV.\n\nIf you want to get the voltage periodically, it is recommended to use the\ncallback :func:`Voltage` and set the period with \n:func:`SetVoltageCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetVoltageCallbackPeriod",
                "set_voltage_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Voltage` Callback f\u00fcr den\n\u00fcbergebenen Kanal ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Voltage` wird nur ausgel\u00f6st wenn sich die Spannung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0. \n",
                    "en": "\nSets the period in ms with which the :func:`Voltage` callback is triggered\nperiodically for the given channel. A value of 0 turns the callback off.\n\n:func:`Voltage` is only triggered if the voltage has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVoltageCallbackPeriod",
                "get_voltage_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetVoltageCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetVoltageCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "in"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetVoltageCallbackThreshold",
                "set_voltage_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert des :func:`VoltageReached` Callbacks f\u00fcr den \u00fcbergebenen\nKanal.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Spannung *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Spannung *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Spannung kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Spannung gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`VoltageReached` callback for the given\nchannel.\n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the voltage is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the voltage is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the voltage is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the voltage is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int32",
                    1,
                    "out"
                ],
                [
                    "max",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetVoltageCallbackThreshold",
                "get_voltage_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetVoltageCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetVoltageCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDebouncePeriod",
                "set_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der Schwellwert Callback\n\n* :func:`VoltageReached`\n \nausgel\u00f6st werden, wenn der Schwellwert\n\n* :func:`SetVoltageCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`VoltageReached`\n\nis triggered, if the threshold\n\n* :func:`SetVoltageCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDebouncePeriod",
                "get_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "in",
                    [
                        "SampleRate",
                        "sample_rate",
                        [
                            [
                                "976SPS",
                                "976_sps",
                                0
                            ],
                            [
                                "488SPS",
                                "488_sps",
                                1
                            ],
                            [
                                "244SPS",
                                "244_sps",
                                2
                            ],
                            [
                                "122SPS",
                                "122_sps",
                                3
                            ],
                            [
                                "61SPS",
                                "61_sps",
                                4
                            ],
                            [
                                "4SPS",
                                "4_sps",
                                5
                            ],
                            [
                                "2SPS",
                                "2_sps",
                                6
                            ],
                            [
                                "1SPS",
                                "1_sps",
                                7
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetSampleRate",
                "set_sample_rate"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt die Abtastrate. Der Wertebereich der verf\u00fcgbare Abtastraten\nliegt zwischen 1 Wert pro Sekunde und 976 Werte pro Sekunde. Ein\nVerringern der Abtastrate wird auch das Rauschen auf den Daten verringern.\n",
                    "en": "\nSets the sample rate. The sample rate can be between 1 sample per second\nand 976 samples per second. Decreasing the sample rate will also decrease the\nnoise on the data.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "rate",
                    "uint8",
                    1,
                    "out",
                    [
                        "SampleRate",
                        "sample_rate",
                        [
                            [
                                "976SPS",
                                "976_sps",
                                0
                            ],
                            [
                                "488SPS",
                                "488_sps",
                                1
                            ],
                            [
                                "244SPS",
                                "244_sps",
                                2
                            ],
                            [
                                "122SPS",
                                "122_sps",
                                3
                            ],
                            [
                                "61SPS",
                                "61_sps",
                                4
                            ],
                            [
                                "4SPS",
                                "4_sps",
                                5
                            ],
                            [
                                "2SPS",
                                "2_sps",
                                6
                            ],
                            [
                                "1SPS",
                                "1_sps",
                                7
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetSampleRate",
                "get_sample_rate"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Abtastrate zur\u00fcck, wie von :func:`SetSampleRate`\ngesetzt.\n",
                    "en": "\nReturns the sample rate as set by :func:`SetSampleRate`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "offset",
                    "int32",
                    2,
                    "in"
                ],
                [
                    "gain",
                    "int32",
                    2,
                    "in"
                ]
            ],
            "name": [
                "SetCalibration",
                "set_calibration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt Offset und Gain der MCP3911 internen Kalibrierungsregister.\n\nSiehe MCP3911 Datenblatt 7.7 und 7.8. Das Industrial Dual Analog In Bricklet\nwird von Tinkerforge werkskalibriert worden. Ein Aufruf dieser Funktion sollte\nnicht notwendig sein.\n",
                    "en": "\nSets offset and gain of MCP3911 internal calibration registers.\n\nSee MCP3911 datasheet 7.7 and 7.8. The Industrial Dual Analog In Bricklet\nis already factory calibrated by Tinkerforge. It should not be necessary\nfor you to use this function\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "offset",
                    "int32",
                    2,
                    "out"
                ],
                [
                    "gain",
                    "int32",
                    2,
                    "out"
                ]
            ],
            "name": [
                "GetCalibration",
                "get_calibration"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Kalibrierung zur\u00fcck, wie von :func:`SetCalibration` gesetzt.\n",
                    "en": "\nReturns the calibration as set by :func:`SetCalibration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "value",
                    "int32",
                    2,
                    "out"
                ]
            ],
            "name": [
                "GetADCValues",
                "get_adc_values"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die ADC-Werte des MCP3911 ICs zur\u00fcck. Diese Funktion\nwird f\u00fcr die Kalibrierung ben\u00f6tigt, siehe :func:`SetCalibration`.\n",
                    "en": "\nReturns the ADC values as given by the MCP3911 IC. This function\nis needed for proper calibration, see :func:`SetCalibration`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 12,
            "type": "function"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Voltage",
                "voltage"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetVoltageCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Spannung des Kanals.\n\n:func:`Voltage` wird nur ausgel\u00f6st wenn sich die Spannung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetVoltageCallbackPeriod`. The :word:`parameter` is the voltage of the\nchannel.\n\n:func:`Voltage` is only triggered if the voltage has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 13,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "channel",
                    "uint8",
                    1,
                    "out"
                ],
                [
                    "voltage",
                    "int32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "VoltageReached",
                "voltage_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetVoltageCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Spannung des Kanals.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetVoltageCallbackThreshold` is reached.\nThe :word:`parameter` is the voltage of the channel.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 14,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 249,
    "released": true,
    "api": {
        "de": "\nDas Bricklet hat zwei Eingangskan\u00e4le. Funktionen die\nsich direkt auf einen der Kan\u00e4le beziehen haben einen ``channel`` Parameter,\num den Kanal anzugeben. G\u00fcltige Werte f\u00fcr das ``channel`` Parameter sind 0\nund 1.\n",
        "en": "\nThe Bricklet has two input channel. Functions that are related\ndirectly to a channel have a ``channel`` parameter to specify one of the two\nchannels. Valid values for the ``channel`` parameter are 0 and 1.\n"
    },
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "IndustrialDualAnalogIn",
        "industrial_dual_analog_in",
        "Industrial Dual Analog In",
        "Industrial Dual Analog In Bricklet"
    ]
}