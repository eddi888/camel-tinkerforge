{
    "category": "Bricklet",
    "description": {
        "de": "Detektiert Magnetfelder",
        "en": "Detects presence of magnetic field"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "value",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetValue",
                "get_value"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt *true* zur\u00fcck wenn ein Magnetfeld mit 35 Gauss (3,5mT) oder gr\u00f6\u00dfer\ndetektiert wird.\n",
                    "en": "\nReturns *true* if a magnetic field of 35 Gauss (3.5mT) or greater is detected.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "reset_counter",
                    "bool",
                    1,
                    "in"
                ],
                [
                    "count",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetEdgeCount",
                "get_edge_count"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt den aktuellen Wert des Flankenz\u00e4hlers zur\u00fcck. Die zu\nz\u00e4hlenden Flanken (steigend, fallend, beide) k\u00f6nnen mit\n:func:`SetEdgeCountConfig` konfiguriert werden.\n\nWenn reset counter auf *true* gesetzt wird, wird der Z\u00e4hlerstand direkt\nnach dem auslesen auf 0 zur\u00fcckgesetzt.\n",
                    "en": "\nReturns the current value of the edge counter. You can configure\nedge type (rising, falling, both) that is counted with\n:func:`SetEdgeCountConfig`.\n\nIf you set the reset counter to *true*, the count is set back to 0\ndirectly after it is read.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "edge_type",
                    "uint8",
                    1,
                    "in",
                    [
                        "EdgeType",
                        "edge_type",
                        [
                            [
                                "Rising",
                                "rising",
                                0
                            ],
                            [
                                "Falling",
                                "falling",
                                1
                            ],
                            [
                                "Both",
                                "both",
                                2
                            ]
                        ]
                    ]
                ],
                [
                    "debounce",
                    "uint8",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetEdgeCountConfig",
                "set_edge_count_config"
            ],
            "doc": [
                "af",
                {
                    "de": "\nDer edge type Parameter konfiguriert den zu z\u00e4hlenden Flankentyp. Es k\u00f6nnen\nsteigende, fallende oder beide Flanken gez\u00e4hlt werden. M\u00f6gliche Flankentypen\nsind:\n\n* 0 = steigend (Standard)\n* 1 = fallend\n* 2 = beide\n\nWird ein Magnet in die N\u00e4he des Bricklets gebracht (>35 Gauss) erzeugt dies ein *low*-Signal\n(fallende Flanke), wenn ein Magnet vom Bricklet entfernt (<25 Gauss) wird entsteht ein\n*high*-Signal (steigende Flanke).\n\nDie Entprellzeit (debounce) wird in ms angegeben.\n\nDurch das Konfigurieren wird der Wert des Flankenz\u00e4hlers auf 0 zur\u00fcckgesetzt.\n\nFalls unklar ist was dies alles bedeutet, kann diese Funktion einfach\nignoriert werden. Die Standardwerte sind in fast allen Situationen OK.\n\nStandardwerte: 0 (edge type) und 100ms (debounce).\n",
                    "en": "\nThe edge type parameter configures if rising edges, falling edges or \nboth are counted. Possible edge types are:\n\n* 0 = rising (default)\n* 1 = falling\n* 2 = both\n\nA magnetic field of 35 Gauss (3.5mT) or greater causes a falling edge and a\nmagnetic field of 25 Gauss (2.5mT) or smaller causes a rising edge.\n\nIf a magnet comes near the Bricklet the signal goes low (falling edge), if\na magnet is removed from the vicinity the signal goes high (rising edge).\n\nThe debounce time is given in ms.\n\nConfiguring an edge counter resets its value to 0.\n\nIf you don't know what any of this means, just leave it at default. The\ndefault configuration is very likely OK for you.\n\nDefault values: 0 (edge type) and 100ms (debounce time)\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "edge_type",
                    "uint8",
                    1,
                    "out",
                    [
                        "EdgeType",
                        "edge_type",
                        [
                            [
                                "Rising",
                                "rising",
                                0
                            ],
                            [
                                "Falling",
                                "falling",
                                1
                            ],
                            [
                                "Both",
                                "both",
                                2
                            ]
                        ]
                    ]
                ],
                [
                    "debounce",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetEdgeCountConfig",
                "get_edge_count_config"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt den Flankentyp sowie die Entprellzeit zur\u00fcck, wie von\n:func:`SetEdgeCountConfig` gesetzt.\n",
                    "en": "\nReturns the edge type and debounce time as set by :func:`SetEdgeCountConfig`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "edges",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetEdgeInterrupt",
                "set_edge_interrupt"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Anzahl der zu z\u00e4hlenden Flanken bis ein Interrupt\naufgerufen wird.\n\nWenn *edges* auf n gesetzt ist, wird der Interrupt nach jeder\nn-ten detektierten Flanke aufgerufen.\n\nWenn *edges* auf 0 gesetzt ist, wird der Interrupt deaktiviert.\n\nStandardwert ist 0.\n",
                    "en": "\nSets the number of edges until an interrupt is invoked.\n\nIf *edges* is set to n, an interrupt is invoked for every n-th detected edge.\n\nIf *edges* is set to 0, the interrupt is disabled.\n\nDefault value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "edges",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetEdgeInterrupt",
                "get_edge_interrupt"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt *edges* zur\u00fcck, wie von :func:`SetEdgeInterrupt` gesetzt.\n",
                    "en": "\nReturns the edges as set by :func:`SetEdgeInterrupt`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetEdgeCountCallbackPeriod",
                "set_edge_count_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`EdgeCount` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`EdgeCount` wird nur ausgel\u00f6st wenn sich die Flankenz\u00e4hlung seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`EdgeCount` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`EdgeCount` is only triggered if the edge count has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetEdgeCountCallbackPeriod",
                "get_edge_count_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetEdgeCountCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetEdgeCountCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "function"
        },
        {
            "elements": [
                [
                    "count",
                    "uint32",
                    1,
                    "out"
                ],
                [
                    "value",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "EdgeInterrupt",
                "edge_interrupt"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback bei jedem n-ten Z\u00e4hlerwert ausgel\u00f6st, wie von\n:func:`SetEdgeInterrupt` konfiguriert. Die :word:`parameter` \nsind der aktuelle Z\u00e4hlerstand und der aktuelle Wert (siehe\n:func:`GetValue` und :func:`GetEdgeCount`).\n",
                    "en": "\nThis callback is triggered every n-th count, as configured with\n:func:`SetEdgeInterrupt`. The :word:`parameters` are the\ncurrent count and the current value (see :func:`GetValue` and :func:`GetEdgeCount`).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "count",
                    "uint32",
                    1,
                    "out"
                ],
                [
                    "value",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "EdgeCount",
                "edge_count"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit \n:func:`SetEdgeCountCallbackPeriod`, ausgel\u00f6st. Die :word:`parameter` \nsind der aktuelle Z\u00e4hlerstand und der aktuelle Wert (siehe\n:func:`GetValue` and :func:`GetEdgeCount`).\n\n:func:`EdgeCount` wird nur ausgel\u00f6st wenn sich mindestens einer\nder beiden Werte seit der letzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetEdgeCountCallbackPeriod`. The :word:`parameters` are the\ncurrent count and the current value (see :func:`GetValue` and :func:`GetEdgeCount`).\n\n:func:`EdgeCount` is only triggered if the count or value changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 10,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 240,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "HallEffect",
        "hall_effect",
        "Hall Effect",
        "Hall Effect Bricklet"
    ]
}