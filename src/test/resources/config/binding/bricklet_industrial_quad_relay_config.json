{
    "category": "Bricklet",
    "description": {
        "de": "4 galvanisch getrennte Halbleiterrelais (Solid State Relais)",
        "en": "4 galvanically isolated solid state relays"
    },
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "value_mask",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetValue",
                "set_value"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nSetzt die Ausgabewerte mit einer Bitmaske (16Bit). Eine 1 in der Bitmaske\nbedeutet Relais geschlossen und eine 0 in der Bitmaske bedeutet Relais offen.\n\nZum Beispiel: Der Wert 3 bzw. 0b0011 wird die Relais 0-1 schlie\u00dfen und alle\nanderen \u00f6ffnen.\n\nFalls keine Gruppen verwendet werden (siehe :func:`SetGroup`), entsprechen\ndie Pins der Beschriftung auf dem Quad Relay Bricklet.\n\nFalls Gruppen verwendet werden, entsprechen die Pins den Elementen der\nGruppe. Element 1 in der Gruppe bekommt Pins 0-3,\nElement 2 Pins 4-7, Element 3 Pins 8-11 und Element 4 Pins 12-15.\n",
                    "en": "\nSets the output value with a bitmask (16bit). A 1 in the bitmask means relay\nclosed and a 0 means relay open.\n\nFor example: The value 3 or 0b0011 will close the relay of pins 0-1 and open\nthe other pins.\n\nIf no groups are used (see :func:`SetGroup`), the pins correspond to the\nmarkings on the Quad Relay Bricklet.\n\nIf groups are used, the pins correspond to the element in the group.\nElement 1 in the group will get pins 0-3, element 2 pins 4-7, element 3\npins 8-11 and element 4 pins 12-15.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "value_mask",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetValue",
                "get_value"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Bitmaske zur\u00fcck, wie von :func:`SetValue` gesetzt.\n",
                    "en": "\nReturns the bitmask as set by :func:`SetValue`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "selection_mask",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "value_mask",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "time",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetMonoflop",
                "set_monoflop"
            ],
            "doc": [
                "af",
                {
                    "de": "\nKonfiguriert einen Monoflop f\u00fcr die Pins, wie mittels der Bitmaske\ndes ersten Parameters festgelegt.\n\nDer zweite Parameter ist eine Bitmaske mit den gew\u00fcnschten Zust\u00e4nden der\nfestgelegten Pins. Eine 1 in der Bitmaske bedeutet Relais geschlossen und\neine 0 in der Bitmaske bedeutet Relais offen.\n\nDer dritte Parameter stellt die Zeit (in ms) dar, welche die Pins den Zustand\nhalten sollen.\n\nWenn diese Funktion mit den Parametern (9, 1, 1500) bzw. (0b1001, 0b0001, 1500)\naufgerufen wird: Pin 0 wird auf geschlossen und Pin 3 auf ge\u00f6ffnet gesetzt.\nNach 1,5s wird Pin 0 wieder ge\u00f6ffnet und Pin 3 geschlossen.\n\nEin Monoflop kann zur Ausfallsicherung verwendet werden. Beispiel:\nAngenommen ein RS485 Bus und ein Quad Relay Bricklet ist an ein Slave \nStapel verbunden.\nJetzt kann diese Funktion sek\u00fcndlich, mit einem Zeitparameter von 2 Sekunden,\naufgerufen werden. Der Pin wird die gesamte Zeit im Zustand geschlossen sein.\nWenn jetzt die RS485 Verbindung getrennt wird, wird der Pin nach sp\u00e4testens \nzwei Sekunden in den Zustand ge\u00f6ffnet wechseln.\n",
                    "en": "\nConfigures a monoflop of the pins specified by the first parameter\nbitmask.\n\nThe second parameter is a bitmask with the desired value of the specified\npins. A 1 in the bitmask means relay closed and a 0 means relay open.\n\nThe third parameter indicates the time (in ms) that the pins should hold\nthe value.\n\nIf this function is called with the parameters (9, 1, 1500) or\n(0b1001, 0b0001, 1500): Pin 0 will close and pin 3 will open. In 1.5s pin 0\nwill open and pin 3 will close again.\n\nA monoflop can be used as a fail-safe mechanism. For example: Lets assume you\nhave a RS485 bus and a Quad Relay Bricklet connected to one of the slave\nstacks. You can now call this function every second, with a time parameter\nof two seconds and pin 0 closed. Pin 0 will be closed all the time. If now\nthe RS485 connection is lost, then pin 0 will be opened in at most two seconds.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "pin",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "value",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "time",
                    "uint32",
                    1,
                    "out"
                ],
                [
                    "time_remaining",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetMonoflop",
                "get_monoflop"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt (f\u00fcr den angegebenen Pin) den aktuellen Zustand und die Zeit, wie von \n:func:`SetMonoflop` gesetzt, sowie die noch verbleibende Zeit bis zum\nZustandswechsel, zur\u00fcck.\n\nWenn der Timer aktuell nicht l\u00e4uft, ist die noch verbleibende Zeit 0.\n",
                    "en": "\nReturns (for the given pin) the current value and the time as set by\n:func:`SetMonoflop` as well as the remaining time until the value flips.\n\nIf the timer is not running currently, the remaining time will be returned\nas 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "group",
                    "char",
                    4,
                    "in"
                ]
            ],
            "name": [
                "SetGroup",
                "set_group"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt eine Gruppe von Quad Relay Bricklets die zusammenarbeiten sollen.\nM\u00f6gliche Gruppierungen k\u00f6nnen mit der Funktion :func:`GetAvailableForGroup`\ngefunden werden.\n\nEine Gruppe besteht aus 4 Element. Element 1 in der Gruppe bekommt Pins 0-3,\nElement 2 Pins 4-7, Element 3 Pins 8-11 und Element 4 Pins 12-15.\n\nJedes Element kann entweder auf einen der Ports ('a' bis 'd') gesetzt werden\noder falls nicht genutzt 'n' gesetzt werden.\n\nZum Beispiel: Falls zwei Quad Relay Bricklets mit Port A und Port B verbunden\nsind, k\u00f6nnte diese Funktion mit |abnn| aufgerufen werden.\n\nIn diesem Fall w\u00e4ren die Pins von Port A den Werten 0-3 zugewiesen und\ndie Pins von Port B den Werten 4-7. Es ist jetzt m\u00f6glich mit der Funktion\n:func:`SetValue` beide Bricklets gleichzeitig zu kontrollieren.\n",
                    "en": "\nSets a group of Quad Relay Bricklets that should work together. You can\nfind Bricklets that can be grouped together with :func:`GetAvailableForGroup`.\n\nThe group consists of 4 elements. Element 1 in the group will get pins 0-3,\nelement 2 pins 4-7, element 3 pins 8-11 and element 4 pins 12-15.\n\nEach element can either be one of the ports ('a' to 'd') or 'n' if it should\nnot be used.\n\nFor example: If you have two Quad Relay Bricklets connected to port A and\nport B respectively, you could call with |abnn|.\n\nNow the pins on the Quad Relay on port A are assigned to 0-3 and the\npins on the Quad Relay on port B are assigned to 4-7. It is now possible\nto call :func:`SetValue` and control two Bricklets at the same time.\n"
                },
                {
                    "*": {
                        "abnn": {
                            "*": "``['a', 'b', 'n', 'n']``",
                            "php": "``array('a', 'b', 'n', 'n')``"
                        }
                    }
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "group",
                    "char",
                    4,
                    "out"
                ]
            ],
            "name": [
                "GetGroup",
                "get_group"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Gruppierung zur\u00fcck, wie von :func:`SetGroup` gesetzt.\n",
                    "en": "\nReturns the group as set by :func:`SetGroup`\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "available",
                    "uint8",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetAvailableForGroup",
                "get_available_for_group"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt eine Bitmaske von Ports zur\u00fcck die f\u00fcr die Gruppierung zur Verf\u00fcgung\nstehen. Zum Beispiel bedeutet der Wert 5 bzw. 0b0101: Port A und Port C sind\nmit Bricklets verbunden die zusammen gruppiert werden k\u00f6nnen.\n",
                    "en": "\nReturns a bitmask of ports that are available for grouping. For example the\nvalue 5 or 0b0101 means: Port A and port C are connected to Bricklets that\ncan be grouped together.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "selection_mask",
                    "uint16",
                    1,
                    "out"
                ],
                [
                    "value_mask",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "MonoflopDone",
                "monoflop_done"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn ein Monoflop Timer abl\u00e4uft (0 erreicht).\n:word:`parameters` enthalten die beteiligten Pins als Bitmaske und den aktuellen\nZustand als Bitmaske (der Zustand nach dem Monoflop).\n",
                    "en": "\nThis callback is triggered whenever a monoflop timer reaches 0. The\n:word:`parameters` contain the involved pins and the current value of the pins\n(the value after the monoflop).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "selection_mask",
                    "uint16",
                    1,
                    "in"
                ],
                [
                    "value_mask",
                    "uint16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetSelectedValues",
                "set_selected_values"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt die Ausgabewerte mit einer Bitmaske, entsprechend der Selektionsmaske. \nDie Bitmaske ist 16 Bit lang.\n*true* steht f\u00fcr ein geschlossenes Relais und *false* f\u00fcr ein offenes\nRelay.\n\nZum Beispiel: Die Werte (3, 1) bzw. (0b0011, 0b0001) wird das Relais 0\nschlie\u00dfen, das Relais 1 \u00f6ffnen und alle anderen unangetastet lassen.\n\nFalls keine Gruppen verwendet werden (siehe :func:`SetGroup`), entsprechen\ndie Pins der Beschriftung auf dem Quad Relay Bricklet.\n\nFalls Gruppen verwendet werden, entsprechen die Pins den Elementen der\nGruppe. Element 1 in der Gruppe bekommt Pins 0-3,\nElement 2 Pins 4-7, Element 3 Pins 8-11 und Element 4 Pins 12-15.\n",
                    "en": "\nSets the output value with a bitmask, according to the selection mask. \nThe bitmask is 16 bit long, *true* refers to a closed relay and \n*false* refers to an open relay.\n\nFor example: The values (3, 1) or (0b0011, 0b0001) will close the relay of\npin 0, open the relay of pin 1 and leave the others untouched.\n\nIf no groups are used (see :func:`SetGroup`), the pins correspond to the\nmarkings on the Quad Relay Bricklet.\n\nIf groups are used, the pins correspond to the element in the group.\nElement 1 in the group will get pins 0-3, element 2 pins 4-7, element 3\npins 8-11 and element 4 pins 12-15.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 9,
            "type": "function"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist weder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 225,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "IndustrialQuadRelay",
        "industrial_quad_relay",
        "Industrial Quad Relay",
        "Industrial Quad Relay Bricklet"
    ]
}