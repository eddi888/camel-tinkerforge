{
    "category": "Bricklet",
    "description": "Device for sensing Temperature",
    "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
    "packets": [
        {
            "elements": [
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetTemperature",
                "get_temperature"
            ],
            "doc": [
                "bf",
                {
                    "de": "\nGibt die Temperatur des Sensors zur\u00fcck. Der Wertebereich ist von\n-2500 bis 8500 und wird in \u00b0C/100 angegeben, z.B. bedeutet \nein Wert von 4223 eine gemessene Temperatur von 42,23 \u00b0C.\n\nWenn die Temperatur periodisch abgefragt werden soll, wird empfohlen\nden Callback :func:`Temperature` zu nutzen und die Periode mit \n:func:`SetTemperatureCallbackPeriod` vorzugeben.\n",
                    "en": "\nReturns the temperature of the sensor. The value\nhas a range of -2500 to 8500 and is given in \u00b0C/100,\ne.g. a value of 4223 means that a temperature of 42.23 \u00b0C is measured.\n\nIf you want to get the temperature periodically, it is recommended \nto use the callback :func:`Temperature` and set the period with \n:func:`SetTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetTemperatureCallbackPeriod",
                "set_temperature_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher der :func:`Temperature` Callback ausgel\u00f6st wird.\nEin Wert von 0 deaktiviert den Callback.\n\n:func:`Temperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nDer Standardwert ist 0.\n",
                    "en": "\nSets the period in ms with which the :func:`Temperature` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\n:func:`Temperature` is only triggered if the temperature has changed since the\nlast triggering.\n\nThe default value is 0.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 2,
            "type": "function"
        },
        {
            "elements": [
                [
                    "period",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetTemperatureCallbackPeriod",
                "get_temperature_callback_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Periode zur\u00fcck, wie von :func:`SetTemperatureCallbackPeriod`\ngesetzt.\n",
                    "en": "\nReturns the period as set by :func:`SetTemperatureCallbackPeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 3,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "in",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int16",
                    1,
                    "in"
                ],
                [
                    "max",
                    "int16",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetTemperatureCallbackThreshold",
                "set_temperature_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt den Schwellwert f\u00fcr den :func:`TemperatureReached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n \n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st wenn die Temperatur gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n \nDer Standardwert ist ('x', 0, 0).\n",
                    "en": "\nSets the thresholds for the :func:`TemperatureReached` callback. \n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the temperature is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the temperature is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the temperature is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the temperature is greater than the min value (max is ignored)\"\n\nThe default value is ('x', 0, 0).\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 4,
            "type": "function"
        },
        {
            "elements": [
                [
                    "option",
                    "char",
                    1,
                    "out",
                    [
                        "ThresholdOption",
                        "threshold_option",
                        [
                            [
                                "Off",
                                "off",
                                "x"
                            ],
                            [
                                "Outside",
                                "outside",
                                "o"
                            ],
                            [
                                "Inside",
                                "inside",
                                "i"
                            ],
                            [
                                "Smaller",
                                "smaller",
                                "<"
                            ],
                            [
                                "Greater",
                                "greater",
                                ">"
                            ]
                        ]
                    ]
                ],
                [
                    "min",
                    "int16",
                    1,
                    "out"
                ],
                [
                    "max",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetTemperatureCallbackThreshold",
                "get_temperature_callback_threshold"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`SetTemperatureCallbackThreshold`\ngesetzt.\n",
                    "en": "\nReturns the threshold as set by :func:`SetTemperatureCallbackThreshold`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 5,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetDebouncePeriod",
                "set_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nSetzt die Periode in ms mit welcher die Schwellwert Callback\n\n* :func:`TemperatureReached`\n \nausgel\u00f6st wird, wenn der Schwellwert \n\n* :func:`SetTemperatureCallbackThreshold`\n \nweiterhin erreicht bleibt.\n\nDer Standardwert ist 100.\n",
                    "en": "\nSets the period in ms with which the threshold callback\n\n* :func:`TemperatureReached`\n\nis triggered, if the threshold\n\n* :func:`SetTemperatureCallbackThreshold`\n\nkeeps being reached.\n\nThe default value is 100.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 6,
            "type": "function"
        },
        {
            "elements": [
                [
                    "debounce",
                    "uint32",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetDebouncePeriod",
                "get_debounce_period"
            ],
            "doc": [
                "ccf",
                {
                    "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`SetDebouncePeriod`\ngesetzt.\n",
                    "en": "\nReturns the debounce period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 7,
            "type": "function"
        },
        {
            "elements": [
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "Temperature",
                "temperature"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit :func:`SetTemperatureCallbackPeriod`,\nausgel\u00f6st. Der :word:`parameter` ist die Temperatur des Sensors.\n\n:func:`Temperature` wird nur ausgel\u00f6st wenn sich die Temperatur seit der\nletzten Ausl\u00f6sung ge\u00e4ndert hat.\n",
                    "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`SetTemperatureCallbackPeriod`. The :word:`parameter` is the temperature\nof the sensor.\n\n:func:`Temperature` is only triggered if the temperature has changed since the\nlast triggering.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 8,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "temperature",
                    "int16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "TemperatureReached",
                "temperature_reached"
            ],
            "doc": [
                "c",
                {
                    "de": "\nDieser Callback wird ausgel\u00f6st wenn der Schwellwert, wie von \n:func:`SetTemperatureCallbackThreshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Temperatur des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`SetDebouncePeriod` gesetzt, ausgel\u00f6st.\n",
                    "en": "\nThis callback is triggered when the threshold as set by\n:func:`SetTemperatureCallbackThreshold` is reached.\nThe :word:`parameter` is the temperature of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`SetDebouncePeriod`.\n"
                }
            ],
            "since_firmware": [
                1,
                0,
                0
            ],
            "function_id": 9,
            "type": "callback"
        },
        {
            "elements": [
                [
                    "mode",
                    "uint8",
                    1,
                    "in",
                    [
                        "I2CMode",
                        "i2c_mode",
                        [
                            [
                                "Fast",
                                "fast",
                                0
                            ],
                            [
                                "Slow",
                                "slow",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "SetI2CMode",
                "set_i2c_mode"
            ],
            "doc": [
                "af",
                {
                    "de": "\nSetzt den I2C Modus. M\u00f6gliche Modi sind:\n\n* 0: Fast (400kHz, Standard)\n* 1: Slow (100kHz)\n\nWenn Probleme mit offensichtlichen Ausrei\u00dfern in den\nTemperature Bricklet Messungen auftreten, k\u00f6nnen diese eventuell aufgrund\nvon elektromagnetischen St\u00f6rungen sein. In diesem Fall kann es helfen\ndie I2C Geschwindigkeit zu verringern.\n\nFalls in einem System ein hoher Durchsatz an Nachrichten erw\u00fcnscht ist,\nsollte die I2C Geschwindigkeit allerdings nicht verringert werden.\n",
                    "en": "\nSets the I2C mode. Possible modes are:\n\n* 0: Fast (400kHz, default)\n* 1: Slow (100kHz)\n\nIf you have problems with obvious outliers in the\nTemperature Bricklet measurements, they may be caused by EMI issues.\nIn this case it may be helpful to lower the I2C speed.\n\nIt is however not recommended to lower the I2C speed in applications where\na high throughput needs to be achieved.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                1
            ],
            "function_id": 10,
            "type": "function"
        },
        {
            "elements": [
                [
                    "mode",
                    "uint8",
                    1,
                    "out",
                    [
                        "I2CMode",
                        "i2c_mode",
                        [
                            [
                                "Fast",
                                "fast",
                                0
                            ],
                            [
                                "Slow",
                                "slow",
                                1
                            ]
                        ]
                    ]
                ]
            ],
            "name": [
                "GetI2CMode",
                "get_i2c_mode"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt den I2C Modus zur\u00fcck, wie von :func:`SetI2CMode` gesetzt.\n",
                    "en": "\nReturns the I2C mode as set by :func:`SetI2CMode`.\n"
                }
            ],
            "since_firmware": [
                2,
                0,
                1
            ],
            "function_id": 11,
            "type": "function"
        },
        {
            "elements": [
                [
                    "api_version",
                    "uint8",
                    3,
                    "out"
                ]
            ],
            "name": [
                "GetAPIVersion",
                "get_api_version"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die Version der API Definition (Major, Minor, Revision) zur\u00fcck, die diese\nAPI Bindings implementieren. Dies ist werder die Release-Version dieser API\nBindings noch gibt es in irgendeiner Weise Auskunft \u00fcber den oder das\nrepr\u00e4sentierte(n) Brick oder Bricklet.\n",
                    "en": "\nReturns the version of the API definition (major, minor, revision) implemented\nby this API bindings. This is neither the release version of this API bindings\nnor does it tell you anything about the represented Brick or Bricklet.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetResponseExpected",
                "get_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktions\nIDs zur\u00fcck. Es ist *true* falls f\u00fcr die Funktion beim Aufruf eine Antwort\nerwartet wird, *false* andernfalls.\n\nF\u00fcr Getter-Funktionen ist diese Flag immer gesetzt und kann nicht entfernt\nwerden, da diese Funktionen immer eine Antwort senden. F\u00fcr\nKonfigurationsfunktionen f\u00fcr Callbacks ist es standardm\u00e4\u00dfig gesetzt, kann aber\nentfernt werden mittels :func:`SetResponseExpected`. F\u00fcr Setter-Funktionen ist\nes standardm\u00e4\u00dfig nicht gesetzt, kann aber gesetzt werden.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n\nSiehe :func:`SetResponseExpected`\nf\u00fcr die Liste der verf\u00fcgbaren Funktions ID :word:`constants` f\u00fcr diese Funktion.\n",
                    "en": "\nReturns the response expected flag for the function specified by the function\nID parameter. It is *true* if the function is expected to send a response,\n*false* otherwise.\n\nFor getter functions this is enabled by default and cannot be disabled,\nbecause those functions will always send a response. For callback configuration\nfunctions it is enabled by default too, but can be disabled by\n:func:`SetResponseExpected`. For setter functions it is disabled by default\nand can be enabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n\nSee :func:`SetResponseExpected`\nfor the list of function ID :word:`constants` available for this function.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "function_id",
                    "uint8",
                    1,
                    "in"
                ],
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpected",
                "set_response_expected"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr die Funktion mit der angegebenen Funktion\nIDs. Diese Flag kann nur f\u00fcr Setter-Funktionen (Standardwert: *false*) und\nKonfigurationsfunktionen f\u00fcr Callbacks (Standardwert: *true*) ge\u00e4ndert werden.\nF\u00fcr Getter-Funktionen ist das Flag immer gesetzt und f\u00fcr Callbacks niemals.\n\nWenn das Response-Expected-Flag f\u00fcr eine Setter-Funktion gesetzt ist, k\u00f6nnen\nTimeouts und andere Fehlerf\u00e4lle auch f\u00fcr Aufrufe dieser Setter-Funktion\ndetektiert werden. Das Ger\u00e4t sendet dann eine Antwort extra f\u00fcr diesen Zweck.\nWenn das Flag f\u00fcr eine Setter-Funktion nicht gesetzt ist, dann wird keine\nAntwort vom Ger\u00e4t gesendet und Fehler werden stillschweigend ignoriert, da sie\nnicht detektiert werden k\u00f6nnen.\n",
                    "en": "\nChanges the response expected flag of the function specified by the\nfunction ID parameter. This flag can only be changed for setter (default value:\n*false*) and callback configuration functions (default value: *true*). For\ngetter functions it is always enabled and callbacks it is always disabled.\n\nEnabling the response expected flag for a setter function allows to detect\ntimeouts and other error conditions calls of this setter as well. The\ndevice will then send a response for this purpose. If this flag is disabled for\na setter function then no response is send and errors are silently ignored,\nbecause they cannot be detected.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "response_expected",
                    "bool",
                    1,
                    "in"
                ]
            ],
            "name": [
                "SetResponseExpectedAll",
                "set_response_expected_all"
            ],
            "doc": [
                "af",
                {
                    "de": "\n\u00c4ndert das Response-Expected-Flag f\u00fcr alle Setter-Funktionen und\nKonfigurationsfunktionen f\u00fcr Callbacks diese Ger\u00e4tes.\n",
                    "en": "\nChanges the response expected flag for all setter and callback configuration\nfunctions of this device at once.\n"
                }
            ],
            "is_virtual": true,
            "since_firmware": null,
            "function_id": -1,
            "type": "function"
        },
        {
            "elements": [
                [
                    "uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "connected_uid",
                    "string",
                    8,
                    "out"
                ],
                [
                    "position",
                    "char",
                    1,
                    "out"
                ],
                [
                    "hardware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "firmware_version",
                    "uint8",
                    3,
                    "out"
                ],
                [
                    "device_identifier",
                    "uint16",
                    1,
                    "out"
                ]
            ],
            "name": [
                "GetIdentity",
                "get_identity"
            ],
            "doc": [
                "af",
                {
                    "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position kann 'a', 'b', 'c' oder 'd' sein.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n",
                    "en": "\nReturns the UID, the UID where the Bricklet is connected to, \nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c' or 'd'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n"
                }
            ],
            "prototype_in_device": true,
            "since_firmware": [
                2,
                0,
                0
            ],
            "function_id": 255,
            "type": "function"
        }
    ],
    "device_identifier": 216,
    "released": true,
    "common_included": true,
    "manufacturer": "Tinkerforge",
    "api_version": [
        2,
        0,
        0
    ],
    "name": [
        "Temperature",
        "temperature",
        "Temperature"
    ]
}